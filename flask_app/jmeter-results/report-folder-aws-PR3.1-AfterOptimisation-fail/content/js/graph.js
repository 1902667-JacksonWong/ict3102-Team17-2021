/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "maxY": 15392.0, "series": [{"data": [[0.0, 193.0], [0.1, 213.0], [0.2, 215.0], [0.3, 217.0], [0.4, 218.0], [0.5, 218.0], [0.6, 224.0], [0.7, 249.0], [0.8, 295.0], [0.9, 297.0], [1.0, 299.0], [1.1, 301.0], [1.2, 303.0], [1.3, 304.0], [1.4, 306.0], [1.5, 333.0], [1.6, 335.0], [1.7, 349.0], [1.8, 357.0], [1.9, 357.0], [2.0, 404.0], [2.1, 428.0], [2.2, 428.0], [2.3, 435.0], [2.4, 435.0], [2.5, 438.0], [2.6, 453.0], [2.7, 464.0], [2.8, 477.0], [2.9, 516.0], [3.0, 521.0], [3.1, 524.0], [3.2, 526.0], [3.3, 594.0], [3.4, 595.0], [3.5, 598.0], [3.6, 600.0], [3.7, 608.0], [3.8, 609.0], [3.9, 609.0], [4.0, 614.0], [4.1, 633.0], [4.2, 651.0], [4.3, 674.0], [4.4, 689.0], [4.5, 702.0], [4.6, 705.0], [4.7, 717.0], [4.8, 736.0], [4.9, 738.0], [5.0, 739.0], [5.1, 742.0], [5.2, 771.0], [5.3, 803.0], [5.4, 804.0], [5.5, 811.0], [5.6, 818.0], [5.7, 820.0], [5.8, 838.0], [5.9, 857.0], [6.0, 859.0], [6.1, 862.0], [6.2, 863.0], [6.3, 872.0], [6.4, 894.0], [6.5, 897.0], [6.6, 899.0], [6.7, 910.0], [6.8, 929.0], [6.9, 939.0], [7.0, 943.0], [7.1, 944.0], [7.2, 1062.0], [7.3, 1063.0], [7.4, 1063.0], [7.5, 1078.0], [7.6, 1086.0], [7.7, 1089.0], [7.8, 1091.0], [7.9, 1096.0], [8.0, 1096.0], [8.1, 1098.0], [8.2, 1105.0], [8.3, 1111.0], [8.4, 1148.0], [8.5, 1180.0], [8.6, 1192.0], [8.7, 1193.0], [8.8, 1194.0], [8.9, 1201.0], [9.0, 1202.0], [9.1, 1203.0], [9.2, 1204.0], [9.3, 1204.0], [9.4, 1221.0], [9.5, 1221.0], [9.6, 1235.0], [9.7, 1240.0], [9.8, 1253.0], [9.9, 1267.0], [10.0, 1272.0], [10.1, 1275.0], [10.2, 1279.0], [10.3, 1289.0], [10.4, 1291.0], [10.5, 1294.0], [10.6, 1295.0], [10.7, 1296.0], [10.8, 1399.0], [10.9, 1401.0], [11.0, 1405.0], [11.1, 1411.0], [11.2, 1418.0], [11.3, 1421.0], [11.4, 1421.0], [11.5, 1427.0], [11.6, 1431.0], [11.7, 1435.0], [11.8, 1437.0], [11.9, 1437.0], [12.0, 1438.0], [12.1, 1441.0], [12.2, 1444.0], [12.3, 1446.0], [12.4, 1447.0], [12.5, 1448.0], [12.6, 1499.0], [12.7, 1501.0], [12.8, 1502.0], [12.9, 1503.0], [13.0, 1504.0], [13.1, 1507.0], [13.2, 1556.0], [13.3, 1557.0], [13.4, 1560.0], [13.5, 1561.0], [13.6, 1563.0], [13.7, 1563.0], [13.8, 1591.0], [13.9, 1596.0], [14.0, 1596.0], [14.1, 1626.0], [14.2, 1630.0], [14.3, 1633.0], [14.4, 1658.0], [14.5, 1661.0], [14.6, 1663.0], [14.7, 1665.0], [14.8, 1666.0], [14.9, 1672.0], [15.0, 1701.0], [15.1, 1716.0], [15.2, 1717.0], [15.3, 1722.0], [15.4, 1722.0], [15.5, 1729.0], [15.6, 1729.0], [15.7, 1729.0], [15.8, 1748.0], [15.9, 1752.0], [16.0, 1755.0], [16.1, 1759.0], [16.2, 1762.0], [16.3, 1762.0], [16.4, 1766.0], [16.5, 1774.0], [16.6, 1775.0], [16.7, 1778.0], [16.8, 1782.0], [16.9, 1785.0], [17.0, 1785.0], [17.1, 1787.0], [17.2, 1790.0], [17.3, 1792.0], [17.4, 1794.0], [17.5, 1797.0], [17.6, 1799.0], [17.7, 1800.0], [17.8, 1800.0], [17.9, 1801.0], [18.0, 1801.0], [18.1, 1801.0], [18.2, 1801.0], [18.3, 1804.0], [18.4, 1808.0], [18.5, 1814.0], [18.6, 1817.0], [18.7, 1818.0], [18.8, 1829.0], [18.9, 1835.0], [19.0, 1835.0], [19.1, 1836.0], [19.2, 1838.0], [19.3, 1841.0], [19.4, 1849.0], [19.5, 1851.0], [19.6, 1854.0], [19.7, 1859.0], [19.8, 1861.0], [19.9, 1865.0], [20.0, 1871.0], [20.1, 1878.0], [20.2, 1879.0], [20.3, 1880.0], [20.4, 1881.0], [20.5, 1884.0], [20.6, 1886.0], [20.7, 1887.0], [20.8, 1887.0], [20.9, 1888.0], [21.0, 1889.0], [21.1, 1889.0], [21.2, 1892.0], [21.3, 1896.0], [21.4, 1900.0], [21.5, 1903.0], [21.6, 1909.0], [21.7, 1909.0], [21.8, 1928.0], [21.9, 1929.0], [22.0, 1929.0], [22.1, 1935.0], [22.2, 1938.0], [22.3, 1938.0], [22.4, 1980.0], [22.5, 1983.0], [22.6, 1988.0], [22.7, 1991.0], [22.8, 1993.0], [22.9, 2010.0], [23.0, 2014.0], [23.1, 2016.0], [23.2, 2016.0], [23.3, 2019.0], [23.4, 2035.0], [23.5, 2037.0], [23.6, 2037.0], [23.7, 2039.0], [23.8, 2044.0], [23.9, 2049.0], [24.0, 2049.0], [24.1, 2077.0], [24.2, 2081.0], [24.3, 2093.0], [24.4, 2095.0], [24.5, 2104.0], [24.6, 2105.0], [24.7, 2108.0], [24.8, 2109.0], [24.9, 2124.0], [25.0, 2125.0], [25.1, 2141.0], [25.2, 2148.0], [25.3, 2161.0], [25.4, 2178.0], [25.5, 2180.0], [25.6, 2187.0], [25.7, 2187.0], [25.8, 2198.0], [25.9, 2200.0], [26.0, 2202.0], [26.1, 2203.0], [26.2, 2207.0], [26.3, 2216.0], [26.4, 2217.0], [26.5, 2217.0], [26.6, 2221.0], [26.7, 2225.0], [26.8, 2225.0], [26.9, 2232.0], [27.0, 2235.0], [27.1, 2245.0], [27.2, 2249.0], [27.3, 2250.0], [27.4, 2261.0], [27.5, 2261.0], [27.6, 2277.0], [27.7, 2288.0], [27.8, 2293.0], [27.9, 2297.0], [28.0, 2304.0], [28.1, 2317.0], [28.2, 2327.0], [28.3, 2329.0], [28.4, 2331.0], [28.5, 2340.0], [28.6, 2360.0], [28.7, 2379.0], [28.8, 2389.0], [28.9, 2423.0], [29.0, 2464.0], [29.1, 2499.0], [29.2, 2507.0], [29.3, 2523.0], [29.4, 2534.0], [29.5, 2541.0], [29.6, 2555.0], [29.7, 2583.0], [29.8, 2592.0], [29.9, 2604.0], [30.0, 2617.0], [30.1, 2625.0], [30.2, 2655.0], [30.3, 2666.0], [30.4, 2720.0], [30.5, 2755.0], [30.6, 2797.0], [30.7, 2804.0], [30.8, 2809.0], [30.9, 2822.0], [31.0, 2824.0], [31.1, 2867.0], [31.2, 2872.0], [31.3, 2892.0], [31.4, 2903.0], [31.5, 2925.0], [31.6, 2967.0], [31.7, 2997.0], [31.8, 2999.0], [31.9, 2999.0], [32.0, 3002.0], [32.1, 3002.0], [32.2, 3014.0], [32.3, 3014.0], [32.4, 3016.0], [32.5, 3017.0], [32.6, 3018.0], [32.7, 3026.0], [32.8, 3034.0], [32.9, 3047.0], [33.0, 3049.0], [33.1, 3060.0], [33.2, 3065.0], [33.3, 3069.0], [33.4, 3092.0], [33.5, 3098.0], [33.6, 3108.0], [33.7, 3119.0], [33.8, 3131.0], [33.9, 3136.0], [34.0, 3138.0], [34.1, 3141.0], [34.2, 3145.0], [34.3, 3167.0], [34.4, 3209.0], [34.5, 3222.0], [34.6, 3252.0], [34.7, 3254.0], [34.8, 3264.0], [34.9, 3272.0], [35.0, 3304.0], [35.1, 3317.0], [35.2, 3335.0], [35.3, 3340.0], [35.4, 3356.0], [35.5, 3360.0], [35.6, 3366.0], [35.7, 3381.0], [35.8, 3415.0], [35.9, 3418.0], [36.0, 3442.0], [36.1, 3475.0], [36.2, 3504.0], [36.3, 3509.0], [36.4, 3515.0], [36.5, 3526.0], [36.6, 3542.0], [36.7, 3589.0], [36.8, 3614.0], [36.9, 3616.0], [37.0, 3633.0], [37.1, 3647.0], [37.2, 3672.0], [37.3, 3704.0], [37.4, 3786.0], [37.5, 3809.0], [37.6, 3822.0], [37.7, 3827.0], [37.8, 3864.0], [37.9, 3867.0], [38.0, 3901.0], [38.1, 3905.0], [38.2, 3929.0], [38.3, 3930.0], [38.4, 3936.0], [38.5, 3942.0], [38.6, 3965.0], [38.7, 3984.0], [38.8, 3985.0], [38.9, 3986.0], [39.0, 4042.0], [39.1, 4046.0], [39.2, 4050.0], [39.3, 4064.0], [39.4, 4068.0], [39.5, 4092.0], [39.6, 4099.0], [39.7, 4117.0], [39.8, 4138.0], [39.9, 4151.0], [40.0, 4270.0], [40.1, 4276.0], [40.2, 4438.0], [40.3, 4470.0], [40.4, 4490.0], [40.5, 4549.0], [40.6, 4561.0], [40.7, 4571.0], [40.8, 4628.0], [40.9, 4655.0], [41.0, 4722.0], [41.1, 4795.0], [41.2, 4795.0], [41.3, 4823.0], [41.4, 4829.0], [41.5, 4838.0], [41.6, 4838.0], [41.7, 4845.0], [41.8, 4845.0], [41.9, 4855.0], [42.0, 4874.0], [42.1, 4874.0], [42.2, 4874.0], [42.3, 4875.0], [42.4, 4885.0], [42.5, 4887.0], [42.6, 4890.0], [42.7, 4891.0], [42.8, 4899.0], [42.9, 4913.0], [43.0, 4913.0], [43.1, 4913.0], [43.2, 4928.0], [43.3, 4928.0], [43.4, 4941.0], [43.5, 4969.0], [43.6, 4971.0], [43.7, 4975.0], [43.8, 4990.0], [43.9, 5019.0], [44.0, 5042.0], [44.1, 5047.0], [44.2, 5053.0], [44.3, 5074.0], [44.4, 5074.0], [44.5, 5079.0], [44.6, 5153.0], [44.7, 5158.0], [44.8, 5177.0], [44.9, 5178.0], [45.0, 5185.0], [45.1, 5193.0], [45.2, 5195.0], [45.3, 5212.0], [45.4, 5218.0], [45.5, 5229.0], [45.6, 5235.0], [45.7, 5242.0], [45.8, 5292.0], [45.9, 5298.0], [46.0, 5411.0], [46.1, 5426.0], [46.2, 5453.0], [46.3, 5509.0], [46.4, 5515.0], [46.5, 5602.0], [46.6, 5618.0], [46.7, 5662.0], [46.8, 5698.0], [46.9, 5705.0], [47.0, 5726.0], [47.1, 5759.0], [47.2, 5790.0], [47.3, 5802.0], [47.4, 5809.0], [47.5, 5818.0], [47.6, 5827.0], [47.7, 5829.0], [47.8, 5880.0], [47.9, 5900.0], [48.0, 5914.0], [48.1, 5915.0], [48.2, 5918.0], [48.3, 5972.0], [48.4, 5987.0], [48.5, 6024.0], [48.6, 6052.0], [48.7, 6066.0], [48.8, 6075.0], [48.9, 6077.0], [49.0, 6097.0], [49.1, 6113.0], [49.2, 6115.0], [49.3, 6139.0], [49.4, 6151.0], [49.5, 6169.0], [49.6, 6233.0], [49.7, 6276.0], [49.8, 6289.0], [49.9, 6292.0], [50.0, 6349.0], [50.1, 6375.0], [50.2, 6387.0], [50.3, 6435.0], [50.4, 6441.0], [50.5, 6448.0], [50.6, 6490.0], [50.7, 6500.0], [50.8, 6511.0], [50.9, 6514.0], [51.0, 6618.0], [51.1, 6637.0], [51.2, 6681.0], [51.3, 6748.0], [51.4, 6775.0], [51.5, 6880.0], [51.6, 6925.0], [51.7, 6940.0], [51.8, 6963.0], [51.9, 6963.0], [52.0, 7011.0], [52.1, 7022.0], [52.2, 7044.0], [52.3, 7050.0], [52.4, 7053.0], [52.5, 7054.0], [52.6, 7057.0], [52.7, 7057.0], [52.8, 7059.0], [52.9, 7064.0], [53.0, 7064.0], [53.1, 7069.0], [53.2, 7076.0], [53.3, 7078.0], [53.4, 7079.0], [53.5, 7085.0], [53.6, 7091.0], [53.7, 7115.0], [53.8, 7150.0], [53.9, 7165.0], [54.0, 7199.0], [54.1, 7248.0], [54.2, 7264.0], [54.3, 7288.0], [54.4, 7357.0], [54.5, 7403.0], [54.6, 7411.0], [54.7, 7435.0], [54.8, 7439.0], [54.9, 7453.0], [55.0, 7474.0], [55.1, 7489.0], [55.2, 7510.0], [55.3, 7513.0], [55.4, 7515.0], [55.5, 7526.0], [55.6, 7564.0], [55.7, 7566.0], [55.8, 7589.0], [55.9, 7607.0], [56.0, 7626.0], [56.1, 7654.0], [56.2, 7685.0], [56.3, 7737.0], [56.4, 7762.0], [56.5, 7771.0], [56.6, 7780.0], [56.7, 7800.0], [56.8, 7811.0], [56.9, 7815.0], [57.0, 7846.0], [57.1, 7895.0], [57.2, 7932.0], [57.3, 8011.0], [57.4, 8040.0], [57.5, 8064.0], [57.6, 8067.0], [57.7, 8177.0], [57.8, 8199.0], [57.9, 8224.0], [58.0, 8232.0], [58.1, 8282.0], [58.2, 8362.0], [58.3, 8373.0], [58.4, 8392.0], [58.5, 8401.0], [58.6, 8405.0], [58.7, 8407.0], [58.8, 8459.0], [58.9, 8511.0], [59.0, 8537.0], [59.1, 8553.0], [59.2, 8592.0], [59.3, 8612.0], [59.4, 8663.0], [59.5, 8664.0], [59.6, 8676.0], [59.7, 8724.0], [59.8, 8834.0], [59.9, 8912.0], [60.0, 8927.0], [60.1, 8983.0], [60.2, 8986.0], [60.3, 8995.0], [60.4, 9014.0], [60.5, 9038.0], [60.6, 9058.0], [60.7, 9063.0], [60.8, 9144.0], [60.9, 9157.0], [61.0, 9196.0], [61.1, 9236.0], [61.2, 9243.0], [61.3, 9273.0], [61.4, 9293.0], [61.5, 9311.0], [61.6, 9316.0], [61.7, 9348.0], [61.8, 9374.0], [61.9, 9391.0], [62.0, 9421.0], [62.1, 9423.0], [62.2, 9432.0], [62.3, 9436.0], [62.4, 9465.0], [62.5, 9497.0], [62.6, 9505.0], [62.7, 9508.0], [62.8, 9516.0], [62.9, 9525.0], [63.0, 9533.0], [63.1, 9542.0], [63.2, 9559.0], [63.3, 9561.0], [63.4, 9562.0], [63.5, 9601.0], [63.6, 9605.0], [63.7, 9644.0], [63.8, 9658.0], [63.9, 9683.0], [64.0, 9691.0], [64.1, 9713.0], [64.2, 9717.0], [64.3, 9789.0], [64.4, 9789.0], [64.5, 9810.0], [64.6, 9812.0], [64.7, 9848.0], [64.8, 9849.0], [64.9, 9858.0], [65.0, 9881.0], [65.1, 9891.0], [65.2, 9895.0], [65.3, 9902.0], [65.4, 9912.0], [65.5, 9921.0], [65.6, 9924.0], [65.7, 9927.0], [65.8, 9933.0], [65.9, 9941.0], [66.0, 9948.0], [66.1, 9953.0], [66.2, 9954.0], [66.3, 9960.0], [66.4, 9963.0], [66.5, 9968.0], [66.6, 9975.0], [66.7, 9980.0], [66.8, 9984.0], [66.9, 9986.0], [67.0, 10018.0], [67.1, 10025.0], [67.2, 10034.0], [67.3, 10042.0], [67.4, 10044.0], [67.5, 10047.0], [67.6, 10053.0], [67.7, 10062.0], [67.8, 10085.0], [67.9, 10099.0], [68.0, 10102.0], [68.1, 10114.0], [68.2, 10118.0], [68.3, 10127.0], [68.4, 10134.0], [68.5, 10158.0], [68.6, 10200.0], [68.7, 10201.0], [68.8, 10205.0], [68.9, 10206.0], [69.0, 10218.0], [69.1, 10243.0], [69.2, 10291.0], [69.3, 10329.0], [69.4, 10333.0], [69.5, 10338.0], [69.6, 10371.0], [69.7, 10383.0], [69.8, 10386.0], [69.9, 10478.0], [70.0, 10540.0], [70.1, 10552.0], [70.2, 10585.0], [70.3, 10596.0], [70.4, 10605.0], [70.5, 10607.0], [70.6, 10622.0], [70.7, 10642.0], [70.8, 10681.0], [70.9, 10699.0], [71.0, 10704.0], [71.1, 10742.0], [71.2, 10800.0], [71.3, 10869.0], [71.4, 10893.0], [71.5, 10932.0], [71.6, 10952.0], [71.7, 10953.0], [71.8, 10956.0], [71.9, 10972.0], [72.0, 11000.0], [72.1, 11006.0], [72.2, 11045.0], [72.3, 11048.0], [72.4, 11050.0], [72.5, 11058.0], [72.6, 11058.0], [72.7, 11063.0], [72.8, 11092.0], [72.9, 11130.0], [73.0, 11159.0], [73.1, 11166.0], [73.2, 11171.0], [73.3, 11176.0], [73.4, 11202.0], [73.5, 11204.0], [73.6, 11220.0], [73.7, 11235.0], [73.8, 11240.0], [73.9, 11250.0], [74.0, 11263.0], [74.1, 11265.0], [74.2, 11267.0], [74.3, 11287.0], [74.4, 11298.0], [74.5, 11321.0], [74.6, 11326.0], [74.7, 11356.0], [74.8, 11357.0], [74.9, 11360.0], [75.0, 11366.0], [75.1, 11376.0], [75.2, 11381.0], [75.3, 11383.0], [75.4, 11392.0], [75.5, 11403.0], [75.6, 11406.0], [75.7, 11420.0], [75.8, 11433.0], [75.9, 11436.0], [76.0, 11442.0], [76.1, 11449.0], [76.2, 11466.0], [76.3, 11468.0], [76.4, 11474.0], [76.5, 11474.0], [76.6, 11475.0], [76.7, 11477.0], [76.8, 11482.0], [76.9, 11483.0], [77.0, 11502.0], [77.1, 11507.0], [77.2, 11511.0], [77.3, 11515.0], [77.4, 11516.0], [77.5, 11518.0], [77.6, 11522.0], [77.7, 11537.0], [77.8, 11563.0], [77.9, 11565.0], [78.0, 11568.0], [78.1, 11575.0], [78.2, 11586.0], [78.3, 11588.0], [78.4, 11589.0], [78.5, 11590.0], [78.6, 11597.0], [78.7, 11607.0], [78.8, 11609.0], [78.9, 11610.0], [79.0, 11611.0], [79.1, 11619.0], [79.2, 11619.0], [79.3, 11620.0], [79.4, 11627.0], [79.5, 11629.0], [79.6, 11637.0], [79.7, 11650.0], [79.8, 11654.0], [79.9, 11657.0], [80.0, 11664.0], [80.1, 11665.0], [80.2, 11669.0], [80.3, 11680.0], [80.4, 11685.0], [80.5, 11694.0], [80.6, 11697.0], [80.7, 11700.0], [80.8, 11713.0], [80.9, 11713.0], [81.0, 11715.0], [81.1, 11716.0], [81.2, 11720.0], [81.3, 11720.0], [81.4, 11720.0], [81.5, 11735.0], [81.6, 11737.0], [81.7, 11737.0], [81.8, 11742.0], [81.9, 11750.0], [82.0, 11752.0], [82.1, 11757.0], [82.2, 11774.0], [82.3, 11775.0], [82.4, 11776.0], [82.5, 11776.0], [82.6, 11780.0], [82.7, 11791.0], [82.8, 11792.0], [82.9, 11802.0], [83.0, 11812.0], [83.1, 11814.0], [83.2, 11822.0], [83.3, 11825.0], [83.4, 11825.0], [83.5, 11842.0], [83.6, 11845.0], [83.7, 11846.0], [83.8, 11846.0], [83.9, 11849.0], [84.0, 11854.0], [84.1, 11859.0], [84.2, 11871.0], [84.3, 11887.0], [84.4, 11896.0], [84.5, 11896.0], [84.6, 11900.0], [84.7, 11901.0], [84.8, 11909.0], [84.9, 11911.0], [85.0, 11916.0], [85.1, 11918.0], [85.2, 11923.0], [85.3, 11924.0], [85.4, 11939.0], [85.5, 11946.0], [85.6, 11950.0], [85.7, 11957.0], [85.8, 11974.0], [85.9, 12004.0], [86.0, 12079.0], [86.1, 12164.0], [86.2, 12189.0], [86.3, 12193.0], [86.4, 12197.0], [86.5, 12199.0], [86.6, 12209.0], [86.7, 12211.0], [86.8, 12230.0], [86.9, 12246.0], [87.0, 12272.0], [87.1, 12325.0], [87.2, 12430.0], [87.3, 12457.0], [87.4, 12471.0], [87.5, 12555.0], [87.6, 12647.0], [87.7, 12661.0], [87.8, 12667.0], [87.9, 12670.0], [88.0, 12672.0], [88.1, 12687.0], [88.2, 12691.0], [88.3, 12702.0], [88.4, 12704.0], [88.5, 12723.0], [88.6, 12743.0], [88.7, 12758.0], [88.8, 12762.0], [88.9, 12766.0], [89.0, 12800.0], [89.1, 12828.0], [89.2, 12829.0], [89.3, 12832.0], [89.4, 12917.0], [89.5, 13031.0], [89.6, 13040.0], [89.7, 13073.0], [89.8, 13087.0], [89.9, 13107.0], [90.0, 13161.0], [90.1, 13163.0], [90.2, 13255.0], [90.3, 13272.0], [90.4, 13297.0], [90.5, 13337.0], [90.6, 13345.0], [90.7, 13523.0], [90.8, 13591.0], [90.9, 13671.0], [91.0, 13695.0], [91.1, 13702.0], [91.2, 13714.0], [91.3, 13720.0], [91.4, 13725.0], [91.5, 13748.0], [91.6, 13749.0], [91.7, 13753.0], [91.8, 13781.0], [91.9, 13785.0], [92.0, 13789.0], [92.1, 13792.0], [92.2, 13792.0], [92.3, 13848.0], [92.4, 13854.0], [92.5, 13857.0], [92.6, 13869.0], [92.7, 13886.0], [92.8, 13887.0], [92.9, 13892.0], [93.0, 13898.0], [93.1, 13903.0], [93.2, 14026.0], [93.3, 14038.0], [93.4, 14042.0], [93.5, 14058.0], [93.6, 14064.0], [93.7, 14094.0], [93.8, 14103.0], [93.9, 14110.0], [94.0, 14125.0], [94.1, 14207.0], [94.2, 14231.0], [94.3, 14251.0], [94.4, 14252.0], [94.5, 14257.0], [94.6, 14270.0], [94.7, 14284.0], [94.8, 14288.0], [94.9, 14294.0], [95.0, 14296.0], [95.1, 14302.0], [95.2, 14339.0], [95.3, 14342.0], [95.4, 14345.0], [95.5, 14349.0], [95.6, 14350.0], [95.7, 14353.0], [95.8, 14371.0], [95.9, 14380.0], [96.0, 14380.0], [96.1, 14390.0], [96.2, 14390.0], [96.3, 14398.0], [96.4, 14438.0], [96.5, 14493.0], [96.6, 14493.0], [96.7, 14502.0], [96.8, 14503.0], [96.9, 14537.0], [97.0, 14547.0], [97.1, 14547.0], [97.2, 14553.0], [97.3, 14587.0], [97.4, 14588.0], [97.5, 14645.0], [97.6, 14657.0], [97.7, 14658.0], [97.8, 14659.0], [97.9, 14660.0], [98.0, 14664.0], [98.1, 14677.0], [98.2, 14682.0], [98.3, 14686.0], [98.4, 14687.0], [98.5, 14698.0], [98.6, 14720.0], [98.7, 14741.0], [98.8, 14744.0], [98.9, 14747.0], [99.0, 14752.0], [99.1, 14759.0], [99.2, 14945.0], [99.3, 14957.0], [99.4, 14960.0], [99.5, 14963.0], [99.6, 14966.0], [99.7, 15004.0], [99.8, 15362.0], [99.9, 15363.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 39.0, "series": [{"data": [[100.0, 1.0], [200.0, 10.0], [300.0, 10.0], [400.0, 9.0], [500.0, 8.0], [600.0, 10.0], [700.0, 8.0], [800.0, 15.0], [900.0, 5.0], [1000.0, 11.0], [1100.0, 8.0], [1200.0, 20.0], [1300.0, 1.0], [1400.0, 19.0], [1500.0, 15.0], [1600.0, 10.0], [1700.0, 29.0], [1800.0, 39.0], [1900.0, 17.0], [2000.0, 17.0], [2100.0, 15.0], [2200.0, 22.0], [2300.0, 10.0], [2400.0, 3.0], [2500.0, 7.0], [2600.0, 6.0], [2700.0, 3.0], [2800.0, 7.0], [2900.0, 7.0], [3000.0, 17.0], [3100.0, 9.0], [3300.0, 8.0], [3200.0, 6.0], [3400.0, 5.0], [3500.0, 6.0], [3600.0, 6.0], [3700.0, 2.0], [3800.0, 5.0], [3900.0, 11.0], [4000.0, 7.0], [4200.0, 2.0], [4100.0, 4.0], [4600.0, 2.0], [4400.0, 3.0], [4500.0, 3.0], [4800.0, 17.0], [4700.0, 3.0], [4900.0, 11.0], [5100.0, 7.0], [5000.0, 8.0], [5200.0, 8.0], [5400.0, 3.0], [5600.0, 4.0], [5500.0, 2.0], [5800.0, 6.0], [5700.0, 5.0], [5900.0, 6.0], [6000.0, 7.0], [6100.0, 5.0], [6200.0, 5.0], [6300.0, 3.0], [6400.0, 4.0], [6500.0, 3.0], [6600.0, 3.0], [6700.0, 3.0], [6800.0, 1.0], [6900.0, 4.0], [7000.0, 18.0], [7100.0, 4.0], [7400.0, 7.0], [7200.0, 4.0], [7300.0, 1.0], [7500.0, 8.0], [7600.0, 4.0], [7700.0, 4.0], [7800.0, 6.0], [7900.0, 1.0], [8000.0, 4.0], [8100.0, 2.0], [8200.0, 3.0], [8300.0, 3.0], [8400.0, 5.0], [8600.0, 4.0], [8500.0, 4.0], [8700.0, 1.0], [9000.0, 4.0], [8900.0, 6.0], [9100.0, 3.0], [9200.0, 4.0], [8800.0, 1.0], [9300.0, 6.0], [9700.0, 5.0], [9400.0, 6.0], [9500.0, 10.0], [9600.0, 6.0], [9900.0, 18.0], [10000.0, 11.0], [10100.0, 7.0], [9800.0, 8.0], [10200.0, 7.0], [10300.0, 6.0], [10500.0, 5.0], [10600.0, 6.0], [10700.0, 2.0], [10400.0, 1.0], [10800.0, 3.0], [11100.0, 6.0], [11200.0, 12.0], [11000.0, 9.0], [10900.0, 6.0], [11500.0, 19.0], [11600.0, 21.0], [11700.0, 23.0], [11300.0, 10.0], [11400.0, 16.0], [11800.0, 19.0], [12100.0, 5.0], [12200.0, 5.0], [12000.0, 2.0], [11900.0, 14.0], [12300.0, 1.0], [12700.0, 8.0], [12400.0, 4.0], [12500.0, 1.0], [12600.0, 7.0], [12800.0, 4.0], [12900.0, 1.0], [13000.0, 4.0], [13100.0, 4.0], [13200.0, 3.0], [13300.0, 2.0], [13800.0, 9.0], [13500.0, 2.0], [13700.0, 13.0], [13600.0, 2.0], [14000.0, 6.0], [14100.0, 3.0], [14300.0, 14.0], [14200.0, 11.0], [13900.0, 1.0], [14500.0, 9.0], [14700.0, 7.0], [14600.0, 11.0], [14400.0, 3.0], [14900.0, 5.0], [15300.0, 3.0], [15000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 876.0, "series": [{"data": [[0.0, 30.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 105.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 876.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 59.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 423.1532710280369, "minX": 1.6379265E12, "maxY": 423.1532710280369, "series": [{"data": [[1.6379265E12, 423.1532710280369]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6379265E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 316.0, "minX": 1.0, "maxY": 15392.0, "series": [{"data": [[2.0, 15004.0], [3.0, 15362.0], [4.0, 13748.0], [5.0, 15363.0], [6.0, 13744.0], [7.0, 13753.0], [8.0, 13523.0], [9.0, 13749.0], [10.0, 13792.0], [11.0, 13903.0], [12.0, 13789.0], [13.0, 13781.0], [14.0, 13792.0], [15.0, 13785.0], [16.0, 13869.0], [17.0, 13857.0], [18.0, 13854.0], [19.0, 13848.0], [20.0, 14251.0], [21.0, 14252.0], [22.0, 14257.0], [23.0, 14207.0], [25.0, 14266.5], [26.0, 14284.0], [27.0, 14294.0], [28.0, 14270.0], [29.0, 14296.0], [30.0, 14350.0], [33.0, 14342.0], [32.0, 14346.0], [35.0, 14390.0], [34.0, 14349.0], [37.0, 14362.5], [39.0, 14465.5], [41.0, 14493.0], [40.0, 14503.0], [43.0, 14587.0], [42.0, 14502.0], [44.0, 14588.0], [47.0, 14550.0], [46.0, 14542.0], [49.0, 14658.0], [48.0, 14553.0], [51.0, 14657.0], [50.0, 14645.0], [53.0, 14707.0], [52.0, 14659.0], [55.0, 14698.0], [54.0, 14682.0], [57.0, 14677.0], [56.0, 14686.0], [59.0, 14660.0], [58.0, 14687.0], [61.0, 14759.0], [60.0, 14664.0], [63.0, 14752.0], [62.0, 14747.0], [67.0, 14720.0], [66.0, 12723.0], [65.0, 14744.0], [64.0, 14741.0], [71.0, 14963.0], [70.0, 12758.0], [69.0, 12702.0], [68.0, 13695.0], [75.0, 13702.0], [74.0, 14966.0], [73.0, 12743.0], [72.0, 13714.0], [79.0, 14945.0], [78.0, 14957.0], [77.0, 13689.0], [83.0, 13671.0], [82.0, 12661.0], [81.0, 12667.0], [80.0, 12672.0], [87.0, 13725.0], [86.0, 12704.0], [85.0, 12735.0], [84.0, 12670.0], [91.0, 13888.0], [90.0, 13887.0], [89.0, 13892.0], [88.0, 13720.0], [95.0, 14038.0], [94.0, 12829.0], [93.0, 12691.0], [92.0, 13898.0], [99.0, 14058.0], [98.0, 14064.0], [97.0, 14026.0], [96.0, 12687.0], [103.0, 14094.0], [102.0, 14231.0], [101.0, 12832.0], [100.0, 14125.0], [105.0, 13272.0], [104.0, 14103.0], [110.0, 14371.0], [109.0, 14390.0], [108.0, 13574.0], [115.0, 14302.0], [114.0, 14359.0], [113.0, 13107.0], [112.0, 13862.5], [119.0, 13040.0], [118.0, 13591.0], [117.0, 11916.0], [116.0, 13255.0], [123.0, 13073.0], [122.0, 13031.0], [121.0, 11896.0], [120.0, 14547.0], [127.0, 11950.0], [126.0, 11939.0], [125.0, 11970.0], [124.0, 11974.0], [135.0, 1865.2857142857142], [131.0, 6008.5], [134.0, 11791.0], [133.0, 11776.0], [132.0, 11802.0], [130.0, 11814.0], [129.0, 11924.0], [128.0, 11957.0], [141.0, 7955.0], [143.0, 11737.0], [142.0, 13337.0], [139.0, 11757.0], [138.0, 11845.0], [137.0, 11750.0], [136.0, 11887.0], [151.0, 4151.0], [150.0, 5984.5], [149.0, 6472.0], [148.0, 13297.0], [147.0, 11854.0], [146.0, 11742.0], [145.0, 11792.0], [144.0, 11923.0], [152.0, 4102.333333333334], [158.0, 316.0], [157.0, 3209.5], [156.0, 11664.0], [155.0, 14110.0], [154.0, 11697.0], [153.0, 11822.0], [160.0, 7172.6], [167.0, 11650.0], [166.0, 11800.5], [164.0, 14042.0], [163.0, 11610.0], [162.0, 11720.0], [161.0, 11575.0], [175.0, 7949.333333333333], [174.0, 431.5], [173.0, 11669.0], [172.0, 11715.0], [171.0, 11537.0], [170.0, 11680.0], [169.0, 11515.0], [168.0, 11511.0], [178.0, 6061.5], [176.0, 6062.0], [183.0, 11637.0], [182.0, 11619.0], [181.0, 11866.5], [180.0, 11657.0], [191.0, 11607.0], [190.0, 11597.0], [189.0, 11611.0], [188.0, 13112.0], [187.0, 11591.0], [186.0, 11589.0], [185.0, 11627.0], [184.0, 11629.0], [199.0, 6212.5], [198.0, 3255.25], [197.0, 11911.0], [196.0, 11733.0], [195.0, 12555.0], [194.0, 11565.0], [193.0, 12916.0], [200.0, 2772.4], [207.0, 11896.0], [206.0, 11685.0], [205.0, 12772.0], [203.0, 11474.0], [202.0, 11600.5], [215.0, 4242.0], [214.0, 11717.0], [212.0, 11877.0], [211.0, 11568.0], [210.0, 11859.0], [209.0, 11901.0], [208.0, 11918.0], [221.0, 4227.333333333334], [223.0, 6020.0], [222.0, 6038.5], [220.0, 11483.0], [219.0, 11477.0], [218.0, 11812.0], [217.0, 11502.0], [216.0, 11825.0], [231.0, 11436.0], [230.0, 11433.0], [229.0, 12471.0], [228.0, 11468.0], [227.0, 11392.0], [226.0, 11518.0], [225.0, 11429.0], [224.0, 11475.0], [237.0, 5996.25], [236.0, 625.5], [235.0, 6775.0], [239.0, 12230.0], [238.0, 12272.0], [234.0, 11406.0], [233.0, 11383.0], [232.0, 11420.0], [247.0, 5984.5], [246.0, 11287.0], [245.0, 11287.0], [244.0, 11321.0], [243.0, 12189.0], [242.0, 12430.0], [241.0, 12828.0], [240.0, 11326.0], [248.0, 6137.5], [255.0, 11220.0], [254.0, 11240.0], [253.0, 12766.0], [252.0, 11235.0], [251.0, 12762.0], [250.0, 12800.0], [249.0, 11588.0], [270.0, 11381.0], [258.0, 3373.75], [257.0, 4263.333333333333], [263.0, 11403.0], [262.0, 10478.0], [261.0, 11250.0], [260.0, 11449.0], [271.0, 11356.0], [269.0, 12193.0], [268.0, 11058.0], [259.0, 10515.0], [267.0, 11171.0], [266.0, 11063.0], [265.0, 10986.0], [286.0, 10679.5], [278.0, 3341.0], [277.0, 3984.3333333333335], [276.0, 11360.0], [275.0, 5910.0], [279.0, 10952.0], [272.0, 12004.0], [274.0, 11006.0], [273.0, 11045.0], [287.0, 10205.0], [284.0, 11202.0], [283.0, 10243.0], [282.0, 11265.0], [281.0, 10932.0], [280.0, 10291.0], [301.0, 12211.0], [303.0, 12209.0], [300.0, 2435.714285714286], [291.0, 11130.0], [290.0, 10127.0], [289.0, 11166.0], [288.0, 12325.0], [299.0, 7545.333333333333], [302.0, 12246.0], [297.0, 11737.0], [296.0, 11694.0], [295.0, 11050.0], [294.0, 11092.0], [293.0, 11103.0], [292.0, 10118.0], [318.0, 10018.0], [306.0, 3116.2], [307.0, 5911.0], [305.0, 6569.0], [304.0, 12197.0], [311.0, 10914.0], [310.0, 10044.0], [309.0, 10953.0], [308.0, 10956.0], [319.0, 10025.0], [313.0, 9953.0], [312.0, 9984.0], [317.0, 9980.0], [316.0, 9933.0], [315.0, 10607.0], [314.0, 9717.0], [334.0, 6454.0], [335.0, 4235.0], [333.0, 9722.0], [332.0, 10704.0], [331.0, 10371.0], [330.0, 9273.0], [329.0, 10383.0], [328.0, 9508.0], [327.0, 9902.0], [321.0, 9881.0], [320.0, 11048.0], [323.0, 9849.0], [322.0, 11619.0], [326.0, 9516.0], [325.0, 9810.0], [324.0, 10800.0], [350.0, 10134.0], [344.0, 3357.0], [336.0, 4223.666666666666], [337.0, 9812.0], [339.0, 10622.0], [338.0, 10642.0], [343.0, 10540.0], [342.0, 10552.0], [341.0, 10585.0], [340.0, 10605.0], [345.0, 5658.0], [351.0, 11176.0], [349.0, 10197.0], [348.0, 9505.0], [347.0, 10206.0], [346.0, 11263.0], [366.0, 9924.0], [367.0, 9921.0], [365.0, 9948.0], [364.0, 9960.0], [363.0, 9316.0], [362.0, 10869.0], [361.0, 8912.0], [360.0, 8927.0], [359.0, 11516.0], [353.0, 11609.0], [352.0, 11620.0], [355.0, 10085.0], [354.0, 10099.0], [358.0, 10034.0], [357.0, 10062.0], [356.0, 10047.0], [382.0, 1130.0], [380.0, 5634.5], [379.0, 2699.8], [378.0, 3411.0], [377.0, 5753.0], [383.0, 8663.5], [381.0, 9157.0], [375.0, 10042.0], [369.0, 9893.0], [371.0, 9848.0], [370.0, 9858.0], [374.0, 10053.0], [373.0, 10102.0], [372.0, 10386.0], [398.0, 9605.0], [399.0, 9562.0], [397.0, 9927.0], [396.0, 9975.0], [395.0, 8676.0], [394.0, 9954.0], [393.0, 8724.0], [392.0, 9963.0], [391.0, 9644.0], [385.0, 9968.0], [384.0, 8834.0], [387.0, 9928.0], [386.0, 9941.0], [390.0, 9658.0], [389.0, 9683.0], [388.0, 9691.0], [414.0, 9559.0], [404.0, 2585.8333333333335], [405.0, 10030.0], [406.0, 4045.0], [415.0, 5273.0], [413.0, 9561.0], [412.0, 7685.0], [407.0, 8362.0], [401.0, 9912.0], [400.0, 9542.0], [403.0, 9525.0], [402.0, 9789.0], [411.0, 9601.0], [410.0, 9421.0], [409.0, 9432.0], [408.0, 9465.0], [431.0, 5335.0], [423.0, 4370.5], [422.0, 4383.0], [421.0, 7515.0], [420.0, 9986.0], [427.0, 3263.75], [430.0, 9497.0], [429.0, 9423.0], [428.0, 9533.0], [419.0, 7564.0], [418.0, 7589.0], [417.0, 7607.0], [416.0, 8224.0], [426.0, 8511.0], [425.0, 9196.0], [424.0, 9436.0], [446.0, 8011.0], [433.0, 3308.25], [432.0, 5539.0], [439.0, 9038.0], [438.0, 9243.0], [437.0, 9058.0], [436.0, 9063.0], [434.0, 1291.0], [435.0, 8743.5], [447.0, 7199.0], [441.0, 7288.0], [440.0, 8986.0], [445.0, 7846.0], [444.0, 9144.0], [443.0, 7248.0], [442.0, 9293.0], [462.0, 5219.0], [463.0, 2715.25], [461.0, 7771.0], [460.0, 6681.0], [459.0, 8067.0], [458.0, 7626.0], [457.0, 8064.0], [456.0, 8989.0], [454.0, 7899.0], [449.0, 7150.0], [448.0, 7165.0], [451.0, 7932.0], [450.0, 7115.0], [453.0, 6963.0], [452.0, 9374.0], [466.0, 4093.0], [467.0, 4084.5], [477.0, 7526.0], [476.0, 7780.0], [479.0, 6375.0], [478.0, 7510.0], [465.0, 2719.0], [464.0, 4603.0], [474.0, 2715.6], [475.0, 7566.0], [472.0, 3963.5], [471.0, 3427.666666666667], [469.0, 4999.5], [468.0, 8592.0], [470.0, 7895.0], [473.0, 4626.0], [494.0, 8407.0], [490.0, 2986.0], [492.0, 3242.75], [491.0, 3975.0], [495.0, 8405.0], [493.0, 7357.0], [489.0, 8282.0], [488.0, 8612.0], [487.0, 6276.0], [481.0, 7264.0], [480.0, 8392.0], [483.0, 6514.0], [482.0, 6349.0], [486.0, 6295.0], [485.0, 8537.0], [484.0, 6511.0], [510.0, 3119.0], [511.0, 4421.5], [509.0, 3393.333333333333], [508.0, 4878.0], [507.0, 8232.0], [506.0, 5987.0], [505.0, 6024.0], [504.0, 6075.0], [503.0, 6052.0], [497.0, 6441.0], [496.0, 6435.0], [499.0, 6097.0], [498.0, 6387.0], [502.0, 8373.0], [501.0, 8401.0], [500.0, 8403.0], [539.0, 3439.333333333333], [525.0, 2927.0], [524.0, 5818.0], [523.0, 8040.0], [522.0, 6113.0], [521.0, 6115.0], [520.0, 6940.0], [526.0, 7800.0], [536.0, 5195.0], [519.0, 7053.0], [518.0, 6169.0], [517.0, 6963.0], [516.0, 7069.0], [515.0, 7022.0], [514.0, 7011.0], [513.0, 6042.0], [512.0, 7059.0], [527.0, 6880.0], [533.0, 3434.0], [532.0, 6799.0], [531.0, 5698.0], [530.0, 7737.0], [529.0, 5284.0], [528.0, 5298.0], [535.0, 7654.0], [534.0, 5229.0], [537.0, 4343.5], [543.0, 5602.0], [542.0, 5915.0], [541.0, 6151.0], [540.0, 6139.0], [538.0, 7044.0], [572.0, 7091.0], [554.0, 3603.333333333333], [553.0, 5662.0], [552.0, 5515.0], [555.0, 2981.333333333333], [556.0, 3472.333333333333], [557.0, 7453.0], [559.0, 7050.0], [545.0, 6077.0], [544.0, 7569.0], [547.0, 5705.0], [546.0, 5453.0], [549.0, 5509.0], [548.0, 7061.0], [551.0, 5073.0], [550.0, 7064.0], [558.0, 7057.0], [569.0, 4913.0], [568.0, 4928.0], [575.0, 4396.5], [561.0, 7435.0], [560.0, 4795.0], [563.0, 5759.0], [562.0, 7403.0], [565.0, 5019.0], [564.0, 5726.0], [567.0, 4975.0], [566.0, 6490.0], [574.0, 2612.5], [573.0, 4845.0], [571.0, 5292.0], [570.0, 4913.0], [603.0, 5074.0], [607.0, 5235.0], [591.0, 2764.0], [592.0, 2759.25], [590.0, 3791.5], [589.0, 4855.0], [588.0, 4795.0], [587.0, 4490.0], [586.0, 4823.0], [585.0, 4831.0], [584.0, 4845.0], [593.0, 3109.0], [596.0, 4038.0], [599.0, 5105.5], [597.0, 6292.0], [595.0, 2645.75], [594.0, 5185.0], [605.0, 2230.142857142857], [604.0, 5079.0], [602.0, 5074.0], [601.0, 5426.0], [600.0, 5212.0], [583.0, 5357.0], [581.0, 5827.0], [580.0, 4874.0], [578.0, 4829.0], [577.0, 5153.0], [576.0, 7085.0], [606.0, 4276.0], [636.0, 4891.0], [621.0, 2488.3333333333335], [620.0, 4099.0], [622.0, 4092.0], [633.0, 5272.333333333333], [615.0, 4549.0], [614.0, 3930.0], [613.0, 3929.0], [612.0, 6066.0], [611.0, 4969.0], [610.0, 5177.0], [609.0, 4941.0], [608.0, 5218.0], [623.0, 3822.0], [619.0, 2576.6666666666665], [618.0, 2995.0], [617.0, 3905.0], [616.0, 4913.0], [639.0, 3341.5], [624.0, 5802.0], [626.0, 5880.0], [625.0, 4561.0], [628.0, 4874.0], [627.0, 5042.0], [630.0, 5918.0], [629.0, 4050.0], [638.0, 4722.0], [637.0, 4571.0], [635.0, 4899.0], [634.0, 5900.0], [664.0, 2504.0], [640.0, 2160.1666666666665], [643.0, 4888.5], [641.0, 3965.0], [647.0, 4928.0], [646.0, 4714.0], [655.0, 4628.0], [654.0, 4138.0], [653.0, 3141.0], [652.0, 2397.3333333333335], [651.0, 2967.5], [650.0, 4438.0], [649.0, 4838.0], [648.0, 3867.0], [662.0, 2564.6666666666665], [663.0, 3254.0], [661.0, 2887.5], [671.0, 2824.0], [656.0, 3616.0], [658.0, 5193.0], [657.0, 3272.0], [660.0, 4046.0], [659.0, 3034.0], [670.0, 2809.0], [669.0, 4971.0], [668.0, 3065.0], [667.0, 3986.0], [666.0, 4163.0], [665.0, 3809.0], [699.0, 3827.0], [678.0, 2588.25], [696.0, 2534.0], [679.0, 3936.0], [677.0, 2424.5], [676.0, 2117.0], [675.0, 3018.0], [674.0, 3015.5], [672.0, 4270.0], [687.0, 2655.0], [686.0, 3786.0], [685.0, 2899.5], [683.0, 3276.5], [681.0, 2967.0], [680.0, 3942.0], [703.0, 2523.0], [689.0, 2617.0], [688.0, 3108.0], [692.0, 2598.0], [690.0, 2583.0], [695.0, 2541.0], [694.0, 3119.5], [702.0, 3484.0], [700.0, 2822.0], [698.0, 3589.0], [697.0, 2872.0], [728.0, 2253.5714285714284], [713.0, 2113.5], [710.0, 2587.0], [709.0, 4042.0], [708.0, 3047.0], [707.0, 3786.5], [705.0, 3039.0], [704.0, 4068.0], [711.0, 2804.0], [718.0, 2357.0], [717.0, 3545.0], [715.0, 3414.0], [712.0, 2528.0], [725.0, 2265.5], [724.0, 3901.0], [723.0, 2379.0], [722.0, 2360.0], [721.0, 3633.0], [720.0, 3132.5], [726.0, 3360.0], [735.0, 2807.0], [733.0, 2317.0], [732.0, 3304.0], [731.0, 3542.0], [730.0, 3366.0], [729.0, 2867.0], [760.0, 3356.0], [765.0, 2161.0], [749.0, 2632.6666666666665], [748.0, 2216.0], [750.0, 2389.0], [737.0, 2245.0], [736.0, 3264.0], [739.0, 2249.0], [738.0, 2555.0], [741.0, 2261.0], [740.0, 2217.0], [743.0, 2277.0], [742.0, 2261.0], [762.0, 2183.5], [747.0, 2119.6], [745.0, 2140.75], [744.0, 3252.0], [756.0, 1849.0], [755.0, 3145.0], [754.0, 2207.0], [753.0, 2301.0], [759.0, 2764.5], [757.0, 3113.5], [767.0, 1902.0], [766.0, 1965.0], [764.0, 2202.0], [763.0, 2464.0], [775.0, 2109.0], [796.0, 2449.5], [768.0, 2037.5], [783.0, 2997.0], [782.0, 2999.0], [781.0, 2331.0], [780.0, 3026.0], [779.0, 2105.0], [778.0, 3002.0], [777.0, 3092.0], [776.0, 2423.0], [792.0, 2095.0], [774.0, 3340.0], [773.0, 2104.0], [772.0, 2108.0], [771.0, 3119.0], [770.0, 3131.0], [769.0, 2802.0], [786.0, 2465.0], [789.0, 2156.25], [788.0, 3138.0], [787.0, 2092.0], [791.0, 3016.0], [790.0, 2327.0], [794.0, 1963.0], [795.0, 2037.0], [793.0, 2468.5], [799.0, 2925.0], [785.0, 2093.0], [784.0, 3098.0], [798.0, 2077.0], [797.0, 2081.0], [815.0, 2130.4], [811.0, 2053.3333333333335], [821.0, 2148.5], [819.0, 1993.0], [817.0, 1935.0], [816.0, 2232.0], [807.0, 2016.0], [806.0, 2049.0], [805.0, 2010.0], [804.0, 2041.5], [802.0, 2340.0], [801.0, 2042.0], [814.0, 1980.0], [813.0, 1985.5], [810.0, 2016.3333333333333], [1.0, 15392.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[423.1532710280369, 6816.332710280381]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 821.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3302.9333333333334, "minX": 1.6379265E12, "maxY": 15996.5, "series": [{"data": [[1.6379265E12, 3302.9333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6379265E12, 15996.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6379265E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6816.332710280381, "minX": 1.6379265E12, "maxY": 6816.332710280381, "series": [{"data": [[1.6379265E12, 6816.332710280381]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6379265E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6816.192523364479, "minX": 1.6379265E12, "maxY": 6816.192523364479, "series": [{"data": [[1.6379265E12, 6816.192523364479]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6379265E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1357.509345794393, "minX": 1.6379265E12, "maxY": 1357.509345794393, "series": [{"data": [[1.6379265E12, 1357.509345794393]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6379265E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.6379265E12, "maxY": 15392.0, "series": [{"data": [[1.6379265E12, 15392.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6379265E12, 13343.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6379265E12, 14758.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6379265E12, 14343.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6379265E12, 193.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6379265E12, 6748.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6379265E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 525.0, "minX": 40.0, "maxY": 14238.0, "series": [{"data": [[40.0, 4099.0], [42.0, 3086.5], [45.0, 7566.0], [48.0, 9103.5], [50.0, 9916.5], [54.0, 6310.0], [58.0, 10595.0], [63.0, 3534.0], [67.0, 11287.0], [68.0, 525.0], [75.0, 2108.0], [82.0, 1802.5], [86.0, 1290.0], [105.0, 11737.0], [124.0, 14238.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[40.0, 4890.0], [54.0, 6992.0], [63.0, 5385.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 124.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 525.0, "minX": 40.0, "maxY": 14238.0, "series": [{"data": [[40.0, 4099.0], [42.0, 3086.5], [45.0, 7566.0], [48.0, 9103.5], [50.0, 9916.0], [54.0, 6310.0], [58.0, 10595.0], [63.0, 3534.0], [67.0, 11287.0], [68.0, 525.0], [75.0, 2108.0], [82.0, 1802.5], [86.0, 1290.0], [105.0, 11737.0], [124.0, 14238.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[40.0, 4890.0], [54.0, 6992.0], [63.0, 5385.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 124.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.833333333333332, "minX": 1.6379265E12, "maxY": 17.833333333333332, "series": [{"data": [[1.6379265E12, 17.833333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6379265E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.6379265E12, "maxY": 16.85, "series": [{"data": [[1.6379265E12, 16.85]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6379265E12, 0.9833333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6379265E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.6379265E12, "maxY": 16.85, "series": [{"data": [[1.6379265E12, 16.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6379265E12, 0.9833333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6379265E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.6379265E12, "maxY": 16.85, "series": [{"data": [[1.6379265E12, 16.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6379265E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6379265E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

