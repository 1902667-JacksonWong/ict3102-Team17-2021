/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 152.0, "minX": 0.0, "maxY": 11253.0, "series": [{"data": [[0.0, 152.0], [0.1, 154.0], [0.2, 155.0], [0.3, 155.0], [0.4, 156.0], [0.5, 158.0], [0.6, 207.0], [0.7, 207.0], [0.8, 217.0], [0.9, 218.0], [1.0, 218.0], [1.1, 219.0], [1.2, 258.0], [1.3, 290.0], [1.4, 290.0], [1.5, 293.0], [1.6, 300.0], [1.7, 311.0], [1.8, 330.0], [1.9, 351.0], [2.0, 376.0], [2.1, 386.0], [2.2, 389.0], [2.3, 390.0], [2.4, 390.0], [2.5, 402.0], [2.6, 422.0], [2.7, 434.0], [2.8, 436.0], [2.9, 436.0], [3.0, 445.0], [3.1, 479.0], [3.2, 510.0], [3.3, 514.0], [3.4, 515.0], [3.5, 525.0], [3.6, 526.0], [3.7, 526.0], [3.8, 557.0], [3.9, 591.0], [4.0, 591.0], [4.1, 595.0], [4.2, 601.0], [4.3, 635.0], [4.4, 647.0], [4.5, 650.0], [4.6, 669.0], [4.7, 680.0], [4.8, 688.0], [4.9, 689.0], [5.0, 694.0], [5.1, 695.0], [5.2, 722.0], [5.3, 731.0], [5.4, 731.0], [5.5, 735.0], [5.6, 736.0], [5.7, 789.0], [5.8, 792.0], [5.9, 801.0], [6.0, 808.0], [6.1, 808.0], [6.2, 813.0], [6.3, 818.0], [6.4, 836.0], [6.5, 841.0], [6.6, 885.0], [6.7, 899.0], [6.8, 901.0], [6.9, 903.0], [7.0, 905.0], [7.1, 905.0], [7.2, 910.0], [7.3, 917.0], [7.4, 920.0], [7.5, 923.0], [7.6, 944.0], [7.7, 955.0], [7.8, 959.0], [7.9, 980.0], [8.0, 984.0], [8.1, 1007.0], [8.2, 1011.0], [8.3, 1012.0], [8.4, 1017.0], [8.5, 1018.0], [8.6, 1019.0], [8.7, 1026.0], [8.8, 1035.0], [8.9, 1042.0], [9.0, 1048.0], [9.1, 1054.0], [9.2, 1078.0], [9.3, 1079.0], [9.4, 1087.0], [9.5, 1090.0], [9.6, 1090.0], [9.7, 1093.0], [9.8, 1094.0], [9.9, 1094.0], [10.0, 1147.0], [10.1, 1148.0], [10.2, 1154.0], [10.3, 1156.0], [10.4, 1159.0], [10.5, 1162.0], [10.6, 1165.0], [10.7, 1168.0], [10.8, 1172.0], [10.9, 1172.0], [11.0, 1180.0], [11.1, 1209.0], [11.2, 1275.0], [11.3, 1279.0], [11.4, 1279.0], [11.5, 1280.0], [11.6, 1283.0], [11.7, 1284.0], [11.8, 1291.0], [11.9, 1299.0], [12.0, 1308.0], [12.1, 1311.0], [12.2, 1312.0], [12.3, 1314.0], [12.4, 1364.0], [12.5, 1367.0], [12.6, 1368.0], [12.7, 1370.0], [12.8, 1375.0], [12.9, 1378.0], [13.0, 1398.0], [13.1, 1398.0], [13.2, 1402.0], [13.3, 1408.0], [13.4, 1431.0], [13.5, 1432.0], [13.6, 1447.0], [13.7, 1470.0], [13.8, 1471.0], [13.9, 1472.0], [14.0, 1477.0], [14.1, 1478.0], [14.2, 1485.0], [14.3, 1524.0], [14.4, 1527.0], [14.5, 1528.0], [14.6, 1529.0], [14.7, 1529.0], [14.8, 1530.0], [14.9, 1531.0], [15.0, 1536.0], [15.1, 1536.0], [15.2, 1540.0], [15.3, 1542.0], [15.4, 1542.0], [15.5, 1545.0], [15.6, 1548.0], [15.7, 1552.0], [15.8, 1553.0], [15.9, 1553.0], [16.0, 1553.0], [16.1, 1554.0], [16.2, 1555.0], [16.3, 1556.0], [16.4, 1556.0], [16.5, 1556.0], [16.6, 1556.0], [16.7, 1557.0], [16.8, 1557.0], [16.9, 1557.0], [17.0, 1561.0], [17.1, 1563.0], [17.2, 1563.0], [17.3, 1565.0], [17.4, 1565.0], [17.5, 1570.0], [17.6, 1571.0], [17.7, 1574.0], [17.8, 1575.0], [17.9, 1576.0], [18.0, 1578.0], [18.1, 1578.0], [18.2, 1578.0], [18.3, 1582.0], [18.4, 1582.0], [18.5, 1582.0], [18.6, 1583.0], [18.7, 1584.0], [18.8, 1584.0], [18.9, 1584.0], [19.0, 1584.0], [19.1, 1585.0], [19.2, 1586.0], [19.3, 1586.0], [19.4, 1586.0], [19.5, 1587.0], [19.6, 1587.0], [19.7, 1587.0], [19.8, 1587.0], [19.9, 1589.0], [20.0, 1590.0], [20.1, 1591.0], [20.2, 1592.0], [20.3, 1592.0], [20.4, 1592.0], [20.5, 1593.0], [20.6, 1593.0], [20.7, 1594.0], [20.8, 1594.0], [20.9, 1594.0], [21.0, 1594.0], [21.1, 1594.0], [21.2, 1594.0], [21.3, 1595.0], [21.4, 1595.0], [21.5, 1596.0], [21.6, 1596.0], [21.7, 1596.0], [21.8, 1596.0], [21.9, 1597.0], [22.0, 1598.0], [22.1, 1598.0], [22.2, 1598.0], [22.3, 1598.0], [22.4, 1599.0], [22.5, 1600.0], [22.6, 1601.0], [22.7, 1601.0], [22.8, 1602.0], [22.9, 1602.0], [23.0, 1603.0], [23.1, 1604.0], [23.2, 1605.0], [23.3, 1605.0], [23.4, 1605.0], [23.5, 1606.0], [23.6, 1607.0], [23.7, 1607.0], [23.8, 1607.0], [23.9, 1608.0], [24.0, 1611.0], [24.1, 1611.0], [24.2, 1612.0], [24.3, 1613.0], [24.4, 1613.0], [24.5, 1613.0], [24.6, 1614.0], [24.7, 1615.0], [24.8, 1616.0], [24.9, 1616.0], [25.0, 1617.0], [25.1, 1617.0], [25.2, 1619.0], [25.3, 1619.0], [25.4, 1619.0], [25.5, 1619.0], [25.6, 1620.0], [25.7, 1620.0], [25.8, 1621.0], [25.9, 1622.0], [26.0, 1623.0], [26.1, 1623.0], [26.2, 1623.0], [26.3, 1624.0], [26.4, 1624.0], [26.5, 1625.0], [26.6, 1625.0], [26.7, 1625.0], [26.8, 1628.0], [26.9, 1628.0], [27.0, 1630.0], [27.1, 1630.0], [27.2, 1631.0], [27.3, 1632.0], [27.4, 1632.0], [27.5, 1632.0], [27.6, 1633.0], [27.7, 1633.0], [27.8, 1634.0], [27.9, 1635.0], [28.0, 1647.0], [28.1, 1647.0], [28.2, 1649.0], [28.3, 1651.0], [28.4, 1655.0], [28.5, 1657.0], [28.6, 1660.0], [28.7, 1666.0], [28.8, 1668.0], [28.9, 1669.0], [29.0, 1674.0], [29.1, 1675.0], [29.2, 1677.0], [29.3, 1679.0], [29.4, 1679.0], [29.5, 1772.0], [29.6, 1833.0], [29.7, 1846.0], [29.8, 1865.0], [29.9, 1872.0], [30.0, 1884.0], [30.1, 1888.0], [30.2, 1894.0], [30.3, 1896.0], [30.4, 1896.0], [30.5, 1900.0], [30.6, 1901.0], [30.7, 1905.0], [30.8, 1906.0], [30.9, 1906.0], [31.0, 1909.0], [31.1, 1910.0], [31.2, 1910.0], [31.3, 1913.0], [31.4, 1914.0], [31.5, 1916.0], [31.6, 1919.0], [31.7, 1923.0], [31.8, 1933.0], [31.9, 1933.0], [32.0, 1936.0], [32.1, 1937.0], [32.2, 1938.0], [32.3, 1938.0], [32.4, 1940.0], [32.5, 1950.0], [32.6, 1952.0], [32.7, 1953.0], [32.8, 1956.0], [32.9, 1958.0], [33.0, 1967.0], [33.1, 1968.0], [33.2, 1974.0], [33.3, 1974.0], [33.4, 1975.0], [33.5, 2084.0], [33.6, 2142.0], [33.7, 2468.0], [33.8, 2470.0], [33.9, 2495.0], [34.0, 2503.0], [34.1, 2505.0], [34.2, 2530.0], [34.3, 2530.0], [34.4, 2535.0], [34.5, 2537.0], [34.6, 2545.0], [34.7, 2563.0], [34.8, 2567.0], [34.9, 2573.0], [35.0, 2580.0], [35.1, 2586.0], [35.2, 2588.0], [35.3, 2592.0], [35.4, 2594.0], [35.5, 2596.0], [35.6, 2601.0], [35.7, 2603.0], [35.8, 2606.0], [35.9, 2606.0], [36.0, 2620.0], [36.1, 2622.0], [36.2, 2623.0], [36.3, 2626.0], [36.4, 2627.0], [36.5, 2629.0], [36.6, 2630.0], [36.7, 2631.0], [36.8, 2632.0], [36.9, 2632.0], [37.0, 2635.0], [37.1, 2635.0], [37.2, 2636.0], [37.3, 2636.0], [37.4, 2636.0], [37.5, 2637.0], [37.6, 2639.0], [37.7, 2640.0], [37.8, 2642.0], [37.9, 2644.0], [38.0, 2647.0], [38.1, 2648.0], [38.2, 2650.0], [38.3, 2650.0], [38.4, 2654.0], [38.5, 2654.0], [38.6, 2654.0], [38.7, 2654.0], [38.8, 2655.0], [38.9, 2656.0], [39.0, 2659.0], [39.1, 2659.0], [39.2, 2665.0], [39.3, 2667.0], [39.4, 2669.0], [39.5, 2674.0], [39.6, 2674.0], [39.7, 2675.0], [39.8, 2675.0], [39.9, 2678.0], [40.0, 2686.0], [40.1, 2687.0], [40.2, 2694.0], [40.3, 2695.0], [40.4, 2695.0], [40.5, 2696.0], [40.6, 2701.0], [40.7, 2702.0], [40.8, 2703.0], [40.9, 2708.0], [41.0, 2715.0], [41.1, 2715.0], [41.2, 2798.0], [41.3, 2828.0], [41.4, 2832.0], [41.5, 2836.0], [41.6, 2841.0], [41.7, 2845.0], [41.8, 2897.0], [41.9, 2903.0], [42.0, 2922.0], [42.1, 2924.0], [42.2, 2928.0], [42.3, 2929.0], [42.4, 2929.0], [42.5, 2934.0], [42.6, 2935.0], [42.7, 2937.0], [42.8, 2937.0], [42.9, 2940.0], [43.0, 2941.0], [43.1, 2946.0], [43.2, 2947.0], [43.3, 2950.0], [43.4, 2977.0], [43.5, 2977.0], [43.6, 2980.0], [43.7, 2982.0], [43.8, 2984.0], [43.9, 2985.0], [44.0, 2992.0], [44.1, 2995.0], [44.2, 2996.0], [44.3, 2997.0], [44.4, 3010.0], [44.5, 3023.0], [44.6, 3026.0], [44.7, 3044.0], [44.8, 3162.0], [44.9, 3164.0], [45.0, 3164.0], [45.1, 3511.0], [45.2, 3548.0], [45.3, 3557.0], [45.4, 3559.0], [45.5, 3570.0], [45.6, 3571.0], [45.7, 3587.0], [45.8, 3595.0], [45.9, 3614.0], [46.0, 3617.0], [46.1, 3619.0], [46.2, 3623.0], [46.3, 3625.0], [46.4, 3631.0], [46.5, 3641.0], [46.6, 3642.0], [46.7, 3648.0], [46.8, 3652.0], [46.9, 3664.0], [47.0, 3674.0], [47.1, 3674.0], [47.2, 3678.0], [47.3, 3679.0], [47.4, 3687.0], [47.5, 3714.0], [47.6, 3730.0], [47.7, 3743.0], [47.8, 3750.0], [47.9, 3754.0], [48.0, 3764.0], [48.1, 3765.0], [48.2, 3766.0], [48.3, 3785.0], [48.4, 3787.0], [48.5, 3789.0], [48.6, 3798.0], [48.7, 3803.0], [48.8, 3805.0], [48.9, 3811.0], [49.0, 3815.0], [49.1, 3816.0], [49.2, 3817.0], [49.3, 3867.0], [49.4, 3905.0], [49.5, 3972.0], [49.6, 3991.0], [49.7, 4006.0], [49.8, 4009.0], [49.9, 4042.0], [50.0, 4639.0], [50.1, 4646.0], [50.2, 4649.0], [50.3, 4651.0], [50.4, 4658.0], [50.5, 4660.0], [50.6, 4660.0], [50.7, 4667.0], [50.8, 4672.0], [50.9, 4689.0], [51.0, 4694.0], [51.1, 4699.0], [51.2, 4712.0], [51.3, 4724.0], [51.4, 4725.0], [51.5, 4728.0], [51.6, 4729.0], [51.7, 4738.0], [51.8, 4742.0], [51.9, 4746.0], [52.0, 4758.0], [52.1, 4762.0], [52.2, 4767.0], [52.3, 4768.0], [52.4, 4772.0], [52.5, 4773.0], [52.6, 4773.0], [52.7, 4778.0], [52.8, 4800.0], [52.9, 4801.0], [53.0, 4809.0], [53.1, 4810.0], [53.2, 4820.0], [53.3, 4830.0], [53.4, 4832.0], [53.5, 4852.0], [53.6, 4856.0], [53.7, 4859.0], [53.8, 4863.0], [53.9, 4869.0], [54.0, 4880.0], [54.1, 4880.0], [54.2, 4884.0], [54.3, 4886.0], [54.4, 4889.0], [54.5, 4890.0], [54.6, 4901.0], [54.7, 4904.0], [54.8, 4912.0], [54.9, 4913.0], [55.0, 4923.0], [55.1, 4928.0], [55.2, 4949.0], [55.3, 4952.0], [55.4, 4953.0], [55.5, 4955.0], [55.6, 4955.0], [55.7, 4959.0], [55.8, 4961.0], [55.9, 4964.0], [56.0, 4968.0], [56.1, 4970.0], [56.2, 4970.0], [56.3, 4976.0], [56.4, 4981.0], [56.5, 4985.0], [56.6, 4990.0], [56.7, 4992.0], [56.8, 4992.0], [56.9, 4993.0], [57.0, 4993.0], [57.1, 4995.0], [57.2, 4997.0], [57.3, 4999.0], [57.4, 5001.0], [57.5, 5001.0], [57.6, 5010.0], [57.7, 5012.0], [57.8, 5013.0], [57.9, 5014.0], [58.0, 5025.0], [58.1, 5029.0], [58.2, 5032.0], [58.3, 5036.0], [58.4, 5040.0], [58.5, 5042.0], [58.6, 5047.0], [58.7, 5047.0], [58.8, 5048.0], [58.9, 5050.0], [59.0, 5053.0], [59.1, 5062.0], [59.2, 5076.0], [59.3, 5083.0], [59.4, 5089.0], [59.5, 5090.0], [59.6, 5092.0], [59.7, 5095.0], [59.8, 5104.0], [59.9, 5106.0], [60.0, 5144.0], [60.1, 5164.0], [60.2, 5166.0], [60.3, 5173.0], [60.4, 5173.0], [60.5, 5193.0], [60.6, 5199.0], [60.7, 5200.0], [60.8, 5202.0], [60.9, 5206.0], [61.0, 5210.0], [61.1, 5213.0], [61.2, 5220.0], [61.3, 5222.0], [61.4, 5225.0], [61.5, 5226.0], [61.6, 5229.0], [61.7, 5230.0], [61.8, 5235.0], [61.9, 5268.0], [62.0, 5276.0], [62.1, 5310.0], [62.2, 5313.0], [62.3, 5354.0], [62.4, 5357.0], [62.5, 5385.0], [62.6, 5390.0], [62.7, 5398.0], [62.8, 5401.0], [62.9, 5401.0], [63.0, 5423.0], [63.1, 5423.0], [63.2, 5431.0], [63.3, 5622.0], [63.4, 5735.0], [63.5, 5738.0], [63.6, 5743.0], [63.7, 5752.0], [63.8, 5758.0], [63.9, 5767.0], [64.0, 5777.0], [64.1, 5778.0], [64.2, 5783.0], [64.3, 5800.0], [64.4, 5824.0], [64.5, 5831.0], [64.6, 5845.0], [64.7, 5850.0], [64.8, 5961.0], [64.9, 5967.0], [65.0, 5971.0], [65.1, 5977.0], [65.2, 5977.0], [65.3, 5982.0], [65.4, 6002.0], [65.5, 6022.0], [65.6, 6042.0], [65.7, 6044.0], [65.8, 6158.0], [65.9, 6167.0], [66.0, 6250.0], [66.1, 6297.0], [66.2, 6302.0], [66.3, 6302.0], [66.4, 6304.0], [66.5, 6307.0], [66.6, 6313.0], [66.7, 6314.0], [66.8, 6326.0], [66.9, 6327.0], [67.0, 6330.0], [67.1, 6332.0], [67.2, 6343.0], [67.3, 6345.0], [67.4, 6351.0], [67.5, 6351.0], [67.6, 6355.0], [67.7, 6359.0], [67.8, 6369.0], [67.9, 6372.0], [68.0, 6374.0], [68.1, 6379.0], [68.2, 6394.0], [68.3, 6397.0], [68.4, 6533.0], [68.5, 6579.0], [68.6, 6583.0], [68.7, 6600.0], [68.8, 6620.0], [68.9, 6629.0], [69.0, 6689.0], [69.1, 6764.0], [69.2, 6794.0], [69.3, 6813.0], [69.4, 6816.0], [69.5, 6825.0], [69.6, 6866.0], [69.7, 6874.0], [69.8, 6881.0], [69.9, 6903.0], [70.0, 6908.0], [70.1, 6913.0], [70.2, 6915.0], [70.3, 6917.0], [70.4, 6918.0], [70.5, 6922.0], [70.6, 6926.0], [70.7, 6930.0], [70.8, 6932.0], [70.9, 6935.0], [71.0, 6935.0], [71.1, 6935.0], [71.2, 6940.0], [71.3, 6947.0], [71.4, 6962.0], [71.5, 7075.0], [71.6, 7087.0], [71.7, 7096.0], [71.8, 7119.0], [71.9, 7121.0], [72.0, 7144.0], [72.1, 7164.0], [72.2, 7201.0], [72.3, 7214.0], [72.4, 7248.0], [72.5, 7385.0], [72.6, 7388.0], [72.7, 7406.0], [72.8, 7415.0], [72.9, 7528.0], [73.0, 7540.0], [73.1, 7548.0], [73.2, 7565.0], [73.3, 7572.0], [73.4, 7733.0], [73.5, 7734.0], [73.6, 7749.0], [73.7, 7751.0], [73.8, 7755.0], [73.9, 7757.0], [74.0, 7758.0], [74.1, 7758.0], [74.2, 7765.0], [74.3, 7765.0], [74.4, 7766.0], [74.5, 7768.0], [74.6, 7776.0], [74.7, 7781.0], [74.8, 7784.0], [74.9, 7787.0], [75.0, 7789.0], [75.1, 7790.0], [75.2, 7792.0], [75.3, 7793.0], [75.4, 7794.0], [75.5, 7795.0], [75.6, 7796.0], [75.7, 7799.0], [75.8, 7811.0], [75.9, 7831.0], [76.0, 7841.0], [76.1, 7855.0], [76.2, 7858.0], [76.3, 7887.0], [76.4, 7895.0], [76.5, 7938.0], [76.6, 7946.0], [76.7, 8099.0], [76.8, 8105.0], [76.9, 8123.0], [77.0, 8127.0], [77.1, 8128.0], [77.2, 8129.0], [77.3, 8131.0], [77.4, 8134.0], [77.5, 8134.0], [77.6, 8139.0], [77.7, 8162.0], [77.8, 8183.0], [77.9, 8186.0], [78.0, 8189.0], [78.1, 8192.0], [78.2, 8194.0], [78.3, 8564.0], [78.4, 8572.0], [78.5, 8574.0], [78.6, 8579.0], [78.7, 8584.0], [78.8, 8595.0], [78.9, 8603.0], [79.0, 8603.0], [79.1, 8605.0], [79.2, 8607.0], [79.3, 8613.0], [79.4, 8614.0], [79.5, 8620.0], [79.6, 8622.0], [79.7, 8811.0], [79.8, 8811.0], [79.9, 8849.0], [80.0, 8854.0], [80.1, 8858.0], [80.2, 8861.0], [80.3, 8861.0], [80.4, 8889.0], [80.5, 8890.0], [80.6, 8902.0], [80.7, 8911.0], [80.8, 8912.0], [80.9, 8914.0], [81.0, 8916.0], [81.1, 8917.0], [81.2, 8924.0], [81.3, 8928.0], [81.4, 8929.0], [81.5, 8929.0], [81.6, 8933.0], [81.7, 8937.0], [81.8, 8938.0], [81.9, 8940.0], [82.0, 8945.0], [82.1, 8946.0], [82.2, 8954.0], [82.3, 8955.0], [82.4, 8960.0], [82.5, 8961.0], [82.6, 8964.0], [82.7, 8964.0], [82.8, 8965.0], [82.9, 8966.0], [83.0, 8983.0], [83.1, 9001.0], [83.2, 9011.0], [83.3, 9020.0], [83.4, 9026.0], [83.5, 9029.0], [83.6, 9029.0], [83.7, 9035.0], [83.8, 9038.0], [83.9, 9044.0], [84.0, 9062.0], [84.1, 9064.0], [84.2, 9064.0], [84.3, 9066.0], [84.4, 9067.0], [84.5, 9067.0], [84.6, 9069.0], [84.7, 9069.0], [84.8, 9072.0], [84.9, 9073.0], [85.0, 9074.0], [85.1, 9075.0], [85.2, 9077.0], [85.3, 9085.0], [85.4, 9086.0], [85.5, 9087.0], [85.6, 9092.0], [85.7, 9097.0], [85.8, 9099.0], [85.9, 9101.0], [86.0, 9102.0], [86.1, 9103.0], [86.2, 9105.0], [86.3, 9107.0], [86.4, 9109.0], [86.5, 9109.0], [86.6, 9116.0], [86.7, 9123.0], [86.8, 9131.0], [86.9, 9132.0], [87.0, 9134.0], [87.1, 9139.0], [87.2, 9142.0], [87.3, 9142.0], [87.4, 9147.0], [87.5, 9148.0], [87.6, 9148.0], [87.7, 9159.0], [87.8, 9159.0], [87.9, 9175.0], [88.0, 9176.0], [88.1, 9182.0], [88.2, 9185.0], [88.3, 9186.0], [88.4, 9196.0], [88.5, 9198.0], [88.6, 9209.0], [88.7, 9213.0], [88.8, 9213.0], [88.9, 9214.0], [89.0, 9218.0], [89.1, 9219.0], [89.2, 9220.0], [89.3, 9220.0], [89.4, 9222.0], [89.5, 9223.0], [89.6, 9223.0], [89.7, 9227.0], [89.8, 9228.0], [89.9, 9229.0], [90.0, 9231.0], [90.1, 9231.0], [90.2, 9232.0], [90.3, 9232.0], [90.4, 9232.0], [90.5, 9233.0], [90.6, 9236.0], [90.7, 9239.0], [90.8, 9239.0], [90.9, 9239.0], [91.0, 9242.0], [91.1, 9246.0], [91.2, 9254.0], [91.3, 9255.0], [91.4, 9258.0], [91.5, 9259.0], [91.6, 9260.0], [91.7, 9261.0], [91.8, 9262.0], [91.9, 9263.0], [92.0, 9264.0], [92.1, 9267.0], [92.2, 9267.0], [92.3, 9267.0], [92.4, 9267.0], [92.5, 9267.0], [92.6, 9267.0], [92.7, 9268.0], [92.8, 9269.0], [92.9, 9270.0], [93.0, 9272.0], [93.1, 9274.0], [93.2, 9277.0], [93.3, 9279.0], [93.4, 9279.0], [93.5, 9279.0], [93.6, 9280.0], [93.7, 9281.0], [93.8, 9281.0], [93.9, 9282.0], [94.0, 9283.0], [94.1, 9284.0], [94.2, 9285.0], [94.3, 9287.0], [94.4, 9287.0], [94.5, 9289.0], [94.6, 9289.0], [94.7, 9290.0], [94.8, 9295.0], [94.9, 9297.0], [95.0, 9303.0], [95.1, 9308.0], [95.2, 9312.0], [95.3, 9313.0], [95.4, 9314.0], [95.5, 9318.0], [95.6, 9325.0], [95.7, 9326.0], [95.8, 9327.0], [95.9, 9332.0], [96.0, 9348.0], [96.1, 9367.0], [96.2, 9758.0], [96.3, 9795.0], [96.4, 9854.0], [96.5, 9955.0], [96.6, 10001.0], [96.7, 10003.0], [96.8, 10015.0], [96.9, 10018.0], [97.0, 10020.0], [97.1, 10022.0], [97.2, 10026.0], [97.3, 10186.0], [97.4, 10209.0], [97.5, 10269.0], [97.6, 10275.0], [97.7, 10284.0], [97.8, 10288.0], [97.9, 10380.0], [98.0, 10719.0], [98.1, 10757.0], [98.2, 10768.0], [98.3, 10789.0], [98.4, 10793.0], [98.5, 10794.0], [98.6, 10797.0], [98.7, 10797.0], [98.8, 10802.0], [98.9, 10869.0], [99.0, 10870.0], [99.1, 10874.0], [99.2, 10883.0], [99.3, 10892.0], [99.4, 10908.0], [99.5, 11006.0], [99.6, 11014.0], [99.7, 11019.0], [99.8, 11030.0], [99.9, 11054.0], [100.0, 11253.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 86.0, "series": [{"data": [[600.0, 10.0], [700.0, 7.0], [800.0, 10.0], [900.0, 14.0], [1000.0, 19.0], [1100.0, 12.0], [1200.0, 9.0], [1300.0, 13.0], [1400.0, 12.0], [1500.0, 86.0], [1600.0, 73.0], [1700.0, 1.0], [1800.0, 10.0], [1900.0, 31.0], [2000.0, 1.0], [2100.0, 1.0], [2400.0, 4.0], [2500.0, 16.0], [2600.0, 53.0], [2800.0, 6.0], [2700.0, 7.0], [2900.0, 27.0], [3000.0, 4.0], [3100.0, 3.0], [3500.0, 8.0], [3600.0, 17.0], [3700.0, 13.0], [3800.0, 7.0], [3900.0, 3.0], [4000.0, 4.0], [4600.0, 12.0], [4700.0, 17.0], [4800.0, 19.0], [4900.0, 29.0], [5000.0, 25.0], [5100.0, 10.0], [5200.0, 15.0], [5300.0, 7.0], [5400.0, 5.0], [5600.0, 1.0], [5800.0, 5.0], [5700.0, 10.0], [6100.0, 2.0], [5900.0, 6.0], [6000.0, 4.0], [6200.0, 3.0], [6300.0, 23.0], [6600.0, 4.0], [6500.0, 3.0], [6900.0, 17.0], [6800.0, 6.0], [6700.0, 2.0], [7100.0, 5.0], [7000.0, 3.0], [7200.0, 3.0], [7300.0, 2.0], [7400.0, 2.0], [7500.0, 5.0], [7800.0, 8.0], [7900.0, 2.0], [7700.0, 25.0], [8100.0, 16.0], [8000.0, 1.0], [8500.0, 6.0], [8600.0, 8.0], [9000.0, 29.0], [9200.0, 67.0], [9100.0, 29.0], [8900.0, 26.0], [8800.0, 10.0], [9300.0, 13.0], [9700.0, 2.0], [9800.0, 1.0], [10000.0, 7.0], [9900.0, 1.0], [10200.0, 5.0], [10100.0, 1.0], [10700.0, 9.0], [10300.0, 1.0], [11000.0, 5.0], [10900.0, 1.0], [10800.0, 6.0], [11200.0, 1.0], [100.0, 6.0], [200.0, 10.0], [300.0, 10.0], [400.0, 7.0], [500.0, 11.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 900.0, "series": [{"data": [[0.0, 33.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 117.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 900.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 407.81809523809505, "minX": 1.63792644E12, "maxY": 407.81809523809505, "series": [{"data": [[1.63792644E12, 407.81809523809505]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792644E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 436.0, "minX": 1.0, "maxY": 11253.0, "series": [{"data": [[2.0, 10020.0], [3.0, 10022.0], [6.0, 10448.0], [7.0, 10186.0], [8.0, 10003.0], [9.0, 10275.0], [10.0, 10269.0], [11.0, 10284.0], [12.0, 10802.0], [13.0, 10380.0], [14.0, 10768.0], [15.0, 10719.0], [16.0, 10797.0], [18.0, 10762.0], [19.0, 10794.0], [20.0, 10793.0], [21.0, 10789.0], [22.0, 10892.0], [23.0, 10757.0], [24.0, 10883.0], [25.0, 8620.0], [26.0, 10869.0], [27.0, 8613.0], [28.0, 8622.0], [29.0, 8584.0], [31.0, 8604.0], [33.0, 8601.0], [35.0, 8614.0], [34.0, 8603.0], [37.0, 8572.0], [36.0, 8574.0], [39.0, 8564.0], [38.0, 8579.0], [41.0, 10872.0], [43.0, 11054.0], [42.0, 8914.0], [45.0, 11014.0], [44.0, 11019.0], [47.0, 10908.0], [46.0, 8811.0], [49.0, 9908.5], [51.0, 8854.5], [53.0, 8859.5], [55.0, 8855.0], [56.0, 8916.0], [59.0, 8928.0], [58.0, 8917.5], [61.0, 8922.5], [63.0, 8964.0], [62.0, 8890.0], [67.0, 8965.0], [66.0, 8964.0], [65.0, 8927.5], [71.0, 8946.0], [70.0, 8917.0], [69.0, 8945.0], [68.0, 8940.0], [75.0, 8928.5], [73.0, 8929.0], [72.0, 8929.0], [79.0, 8960.0], [78.0, 8937.5], [76.0, 8983.0], [83.0, 9035.0], [82.0, 8945.0], [81.0, 8954.0], [80.0, 8961.0], [87.0, 9011.0], [86.0, 9029.0], [85.0, 9020.0], [84.0, 9062.0], [91.0, 9073.0], [90.0, 9069.0], [89.0, 9027.5], [95.0, 9123.0], [94.0, 9077.0], [93.0, 9072.0], [99.0, 9102.0], [98.0, 9099.0], [97.0, 9097.0], [96.0, 9109.0], [103.0, 9072.0], [102.0, 9086.0], [100.0, 9086.0], [107.0, 9038.0], [106.0, 9063.0], [104.0, 9092.0], [111.0, 1433.857142857143], [110.0, 9102.0], [109.0, 9101.0], [108.0, 9116.0], [115.0, 9066.0], [114.0, 9067.0], [113.0, 9064.0], [112.0, 9103.0], [119.0, 9142.0], [118.0, 9044.0], [117.0, 9074.0], [116.0, 9067.0], [123.0, 2015.0], [122.0, 9134.0], [121.0, 9142.0], [120.0, 9147.0], [124.0, 3176.3333333333335], [127.0, 9182.0], [126.0, 9124.0], [135.0, 9177.5], [133.0, 9186.0], [132.0, 9131.0], [131.0, 9148.0], [130.0, 10209.0], [129.0, 9159.0], [128.0, 9175.0], [143.0, 3275.0], [142.0, 4780.0], [141.0, 9209.0], [140.0, 9148.0], [139.0, 9176.0], [138.0, 9180.0], [137.0, 9213.0], [136.0, 9955.0], [144.0, 3287.6666666666665], [145.0, 4770.0], [151.0, 7787.0], [150.0, 9272.0], [149.0, 9289.0], [148.0, 9308.0], [147.0, 9326.0], [146.0, 9312.0], [159.0, 9314.0], [158.0, 9227.0], [157.0, 10001.0], [156.0, 7751.0], [155.0, 10015.0], [154.0, 7799.0], [153.0, 9281.0], [152.0, 7793.0], [167.0, 1489.375], [166.0, 3342.6666666666665], [165.0, 7790.0], [164.0, 9262.0], [163.0, 7796.0], [162.0, 9281.0], [161.0, 9267.0], [160.0, 10018.0], [175.0, 2670.5], [174.0, 9277.0], [173.0, 9232.0], [172.0, 7734.0], [171.0, 9232.0], [170.0, 9318.0], [169.0, 9231.0], [168.0, 9236.0], [176.0, 436.0], [183.0, 9279.0], [182.0, 9267.0], [181.0, 9327.0], [180.0, 8553.0], [178.0, 7789.0], [177.0, 8508.0], [187.0, 6338.0], [186.0, 479.0], [191.0, 9258.666666666666], [188.0, 9254.0], [185.0, 9303.0], [184.0, 9280.0], [196.0, 4884.0], [197.0, 2708.5], [195.0, 4900.0], [194.0, 4907.0], [199.0, 9274.0], [198.0, 9260.0], [193.0, 9231.0], [192.0, 9239.0], [207.0, 9159.0], [206.0, 9196.0], [205.0, 9220.0], [204.0, 9231.0], [203.0, 9220.0], [202.0, 9854.0], [201.0, 9214.0], [200.0, 9233.0], [214.0, 4945.5], [215.0, 9287.0], [213.0, 7214.0], [212.0, 9332.0], [211.0, 8757.5], [209.0, 9795.0], [208.0, 7792.0], [217.0, 4153.0], [216.0, 2330.6], [223.0, 9279.0], [222.0, 7758.0], [221.0, 9267.0], [220.0, 9242.0], [219.0, 9223.0], [218.0, 9239.0], [230.0, 9233.5], [228.0, 9232.0], [227.0, 9222.0], [226.0, 9259.0], [225.0, 9263.5], [239.0, 4224.0], [238.0, 2452.5], [237.0, 9267.0], [236.0, 9270.0], [235.0, 7765.0], [234.0, 8547.0], [232.0, 8487.0], [240.0, 2093.8], [246.0, 3584.0], [247.0, 3605.6666666666665], [245.0, 6794.0], [244.0, 7794.0], [243.0, 7274.0], [241.0, 6825.0], [248.0, 2865.6666666666665], [255.0, 7765.0], [254.0, 8537.0], [252.0, 9284.0], [251.0, 7096.0], [250.0, 7119.0], [249.0, 9313.0], [270.0, 2272.8], [267.0, 2820.666666666667], [268.0, 4476.0], [269.0, 4482.5], [271.0, 8129.0], [266.0, 6866.0], [265.0, 8105.0], [264.0, 6816.0], [263.0, 7087.0], [256.0, 7755.0], [259.0, 9218.0], [258.0, 8506.5], [262.0, 6813.0], [261.0, 7841.0], [260.0, 9219.0], [286.0, 8192.0], [287.0, 6917.0], [285.0, 8189.0], [284.0, 8186.0], [283.0, 7565.0], [282.0, 7075.0], [281.0, 6935.0], [280.0, 7970.5], [278.0, 6932.0], [273.0, 8123.0], [272.0, 8099.0], [275.0, 7855.0], [274.0, 7895.0], [277.0, 6935.0], [276.0, 7152.0], [302.0, 7540.0], [293.0, 894.0], [292.0, 2333.8], [291.0, 4232.5], [290.0, 6930.0], [289.0, 6379.0], [288.0, 6372.0], [295.0, 6345.0], [294.0, 7260.5], [303.0, 6330.0], [297.0, 6926.0], [296.0, 6908.0], [301.0, 6332.0], [300.0, 6326.0], [299.0, 6915.0], [298.0, 6918.0], [317.0, 8128.0], [311.0, 2309.5], [313.0, 2709.0], [312.0, 6297.0], [309.0, 3637.0], [308.0, 6359.0], [310.0, 3630.5], [319.0, 7201.0], [318.0, 7766.0], [316.0, 8127.0], [307.0, 6909.0], [306.0, 6394.0], [305.0, 6314.0], [304.0, 6922.0], [315.0, 6305.5], [332.0, 4472.5], [322.0, 5210.0], [323.0, 7121.0], [321.0, 983.0], [320.0, 3050.0], [327.0, 6947.0], [326.0, 8183.0], [325.0, 8131.0], [324.0, 8139.0], [330.0, 2998.666666666667], [329.0, 5622.0], [328.0, 6935.0], [335.0, 7887.0], [334.0, 7858.0], [333.0, 6874.0], [331.0, 7946.0], [348.0, 5431.0], [342.0, 3806.0], [341.0, 3209.0], [343.0, 2479.0], [337.0, 6158.0], [336.0, 6629.0], [339.0, 5390.0], [338.0, 5423.0], [340.0, 1026.0], [344.0, 3201.0], [351.0, 6579.0], [350.0, 5913.0], [347.0, 5423.0], [346.0, 6985.5], [365.0, 7572.0], [362.0, 1094.0], [361.0, 2448.333333333333], [359.0, 2081.0], [352.0, 5199.0], [354.0, 5229.0], [353.0, 5193.0], [357.0, 3070.0], [356.0, 7415.0], [358.0, 4248.0], [366.0, 7528.0], [360.0, 5357.0], [364.0, 5029.0], [355.0, 5401.0], [363.0, 6264.5], [383.0, 4886.0], [381.0, 3944.3333333333335], [382.0, 2088.0], [380.0, 1151.3333333333333], [371.0, 6533.0], [370.0, 5001.0], [369.0, 5106.0], [368.0, 5089.0], [379.0, 4928.0], [378.0, 4981.0], [377.0, 5967.0], [376.0, 7248.0], [375.0, 4953.0], [374.0, 4913.0], [373.0, 5032.0], [372.0, 4995.0], [387.0, 5076.0], [390.0, 2548.5], [389.0, 2448.333333333333], [396.0, 4084.3333333333335], [399.0, 5697.0], [394.0, 4875.0], [393.0, 5012.0], [392.0, 5019.0], [391.0, 6397.0], [386.0, 6378.0], [385.0, 5376.5], [388.0, 6374.0], [414.0, 4955.0], [415.0, 4884.0], [413.0, 6355.0], [412.0, 5351.5], [411.0, 5104.0], [409.0, 6302.0], [408.0, 5752.0], [407.0, 5854.5], [403.0, 4959.0], [402.0, 5767.0], [401.0, 5014.0], [400.0, 6002.0], [405.0, 6028.0], [430.0, 2843.666666666667], [428.0, 2592.333333333333], [427.0, 3156.0], [431.0, 5047.0], [429.0, 5122.0], [425.0, 4809.0], [424.0, 4880.0], [423.0, 5982.0], [417.0, 6473.5], [419.0, 6022.0], [418.0, 5092.0], [422.0, 4997.0], [421.0, 4912.0], [420.0, 6042.0], [444.0, 5777.0], [437.0, 2496.333333333333], [436.0, 2018.6], [447.0, 4830.0], [446.0, 5047.0], [445.0, 3867.0], [443.0, 4809.0], [441.0, 4762.0], [439.0, 4725.0], [435.0, 4812.5], [433.0, 5565.0], [438.0, 4964.0], [461.0, 6167.0], [455.0, 2212.75], [456.0, 2672.666666666667], [453.0, 1364.0], [452.0, 4762.0], [454.0, 5847.5], [463.0, 5758.0], [462.0, 5164.0], [460.0, 5230.0], [451.0, 4773.0], [450.0, 5042.0], [449.0, 5025.0], [448.0, 4767.0], [459.0, 5293.0], [457.0, 5313.0], [465.0, 3814.0], [464.0, 2304.5], [473.0, 2840.25], [479.0, 3057.0], [478.0, 5215.0], [477.0, 4061.0], [467.0, 4985.0], [466.0, 5800.0], [475.0, 4672.0], [474.0, 4712.0], [471.0, 3815.0], [470.0, 4859.0], [469.0, 4108.5], [494.0, 4768.0], [489.0, 1472.5], [488.0, 3245.5], [490.0, 2567.833333333333], [493.0, 4801.0], [492.0, 3905.0], [491.0, 3678.0], [487.0, 4853.5], [483.0, 5044.0], [481.0, 4961.0], [480.0, 4772.0], [485.0, 4302.5], [509.0, 4694.0], [503.0, 2465.5], [497.0, 4992.0], [496.0, 4879.5], [502.0, 2680.666666666667], [501.0, 2695.666666666667], [500.0, 4925.0], [510.0, 3616.0], [508.0, 4810.0], [498.0, 5048.0], [507.0, 3641.0], [506.0, 3631.0], [505.0, 3648.0], [504.0, 4742.0], [539.0, 5090.0], [524.0, 2490.0], [525.0, 2982.0], [527.0, 3026.0], [512.0, 4952.0], [514.0, 4949.0], [513.0, 4846.5], [517.0, 4411.0], [515.0, 3571.0], [519.0, 5226.0], [518.0, 5225.0], [526.0, 3811.0], [522.0, 2654.0], [523.0, 2619.5], [521.0, 1571.0], [520.0, 3595.0], [543.0, 2045.0], [529.0, 3789.0], [528.0, 2996.0], [531.0, 3557.0], [530.0, 4651.0], [533.0, 2947.0], [532.0, 4649.0], [535.0, 5166.0], [534.0, 4660.0], [542.0, 4795.0], [540.0, 2977.0], [538.0, 2984.0], [537.0, 4068.5], [572.0, 3259.0], [546.0, 2480.4], [547.0, 2305.0], [549.0, 3570.0], [548.0, 4832.0], [551.0, 3766.0], [550.0, 2674.0], [570.0, 2950.0], [569.0, 4826.0], [544.0, 3416.5], [559.0, 3179.5], [558.0, 3548.0], [556.0, 2063.6666666666665], [554.0, 1861.4], [553.0, 2679.0], [552.0, 2985.0], [555.0, 2695.0], [575.0, 2648.0], [563.0, 3023.0], [562.0, 4675.0], [565.0, 2695.0], [564.0, 3816.0], [567.0, 2941.0], [566.0, 5040.0], [574.0, 2715.0], [573.0, 3044.0], [583.0, 1932.8333333333333], [579.0, 2129.0], [578.0, 2158.0], [577.0, 2659.0], [576.0, 4639.0], [591.0, 2573.0], [590.0, 2686.0], [589.0, 3754.0], [588.0, 2635.0], [587.0, 2980.0], [586.0, 3010.0], [585.0, 3798.0], [584.0, 4724.0], [582.0, 2149.5], [581.0, 4699.0], [580.0, 3817.0], [606.0, 1946.888888888889], [601.0, 1528.0], [600.0, 2660.5], [607.0, 1542.0], [592.0, 2995.0], [594.0, 2545.0], [593.0, 3787.0], [597.0, 2929.0], [596.0, 3311.0], [599.0, 2946.0], [598.0, 4646.0], [604.0, 2940.0], [603.0, 2922.0], [602.0, 2732.5], [636.0, 1924.3333333333333], [625.0, 2113.5], [628.0, 1900.0], [631.0, 2855.5], [629.0, 2619.0], [627.0, 1943.0], [624.0, 2271.0], [626.0, 2111.5], [635.0, 1744.5], [634.0, 2934.0], [633.0, 2667.0], [632.0, 2627.0], [623.0, 1938.0], [609.0, 2924.0], [608.0, 2762.0], [611.0, 2665.0], [610.0, 2928.0], [613.0, 3765.0], [612.0, 2580.0], [615.0, 2897.0], [614.0, 2903.0], [622.0, 1940.0], [621.0, 1956.0], [620.0, 2696.0], [619.0, 3319.0], [617.0, 1975.0], [616.0, 2644.0], [639.0, 3991.0], [638.0, 2654.0], [637.0, 4009.0], [667.0, 1592.0], [671.0, 1594.0], [647.0, 1923.0], [648.0, 2118.0], [650.0, 1937.0], [649.0, 3764.0], [652.0, 2702.0], [651.0, 1936.0], [655.0, 2387.0], [640.0, 2674.0], [643.0, 1974.0], [641.0, 2703.0], [646.0, 3687.0], [645.0, 2625.0], [653.0, 1679.0], [662.0, 1808.6666666666665], [663.0, 2636.0], [661.0, 1598.0], [660.0, 2177.0], [659.0, 1640.0], [658.0, 1630.0], [657.0, 2801.0], [670.0, 1657.0], [669.0, 1968.0], [668.0, 2654.0], [666.0, 2505.0], [665.0, 1595.0], [664.0, 3750.0], [698.0, 1777.5], [703.0, 3394.5], [681.0, 1902.5], [683.0, 1749.0], [684.0, 1565.0], [686.0, 2832.0], [685.0, 3619.0], [696.0, 2639.0], [679.0, 2592.0], [678.0, 2828.0], [677.0, 2622.0], [676.0, 1619.0], [675.0, 1604.0], [673.0, 2044.5], [687.0, 2535.0], [699.0, 1633.0], [682.0, 2130.0], [691.0, 1615.5], [690.0, 2993.6666666666665], [693.0, 3623.0], [692.0, 2786.5], [695.0, 1647.0], [694.0, 2637.0], [689.0, 1671.0], [688.0, 1913.0], [701.0, 1606.0], [700.0, 2537.0], [730.0, 2687.0], [717.0, 1582.0], [718.0, 1616.0], [719.0, 1630.0], [711.0, 1914.0], [710.0, 1919.0], [709.0, 3511.0], [708.0, 1598.0], [707.0, 1598.0], [706.0, 1666.0], [705.0, 2567.0], [704.0, 2669.0], [729.0, 1675.0], [728.0, 3164.0], [731.0, 1677.0], [733.0, 2694.0], [732.0, 1669.0], [716.0, 1697.3333333333333], [715.0, 1607.5], [714.0, 1906.0], [713.0, 1668.0], [712.0, 1753.0], [722.0, 1551.6666666666667], [724.0, 1557.0], [723.0, 1953.0], [727.0, 1649.0], [726.0, 2147.0], [721.0, 1579.5], [734.0, 1906.6666666666667], [735.0, 1631.5], [720.0, 1916.0], [762.0, 1586.0], [745.0, 1759.75], [744.0, 1544.0], [747.0, 1841.4], [749.0, 2620.0], [748.0, 1563.0], [751.0, 1611.0], [737.0, 1624.0], [736.0, 1625.0], [739.0, 2678.0], [738.0, 2588.0], [741.0, 2640.0], [740.0, 1668.0], [743.0, 2642.0], [742.0, 1631.0], [750.0, 2609.0], [761.0, 2841.0], [760.0, 2845.0], [765.0, 1587.0], [764.0, 2045.5], [767.0, 1594.0], [753.0, 1910.0], [752.0, 2836.0], [755.0, 1660.0], [754.0, 1595.0], [757.0, 1910.0], [756.0, 1605.0], [759.0, 1603.0], [758.0, 1604.0], [766.0, 2039.5], [763.0, 2630.0], [787.0, 1840.0], [768.0, 2043.6666666666667], [772.0, 1594.0], [769.0, 1905.0], [775.0, 1623.0], [774.0, 1868.0], [790.0, 1974.0], [789.0, 2036.5], [788.0, 1846.0], [786.0, 1570.0], [785.0, 1858.0], [783.0, 1872.0], [782.0, 1906.0], [781.0, 1600.0], [780.0, 1619.0], [779.0, 1623.0], [778.0, 2565.5], [776.0, 2586.0], [1.0, 11253.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[407.8171428571429, 4687.226666666669]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 790.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2957.5, "minX": 1.63792644E12, "maxY": 15697.5, "series": [{"data": [[1.63792644E12, 2957.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63792644E12, 15697.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792644E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4687.226666666669, "minX": 1.63792644E12, "maxY": 4687.226666666669, "series": [{"data": [[1.63792644E12, 4687.226666666669]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792644E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4687.045714285715, "minX": 1.63792644E12, "maxY": 4687.045714285715, "series": [{"data": [[1.63792644E12, 4687.045714285715]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792644E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1929.4114285714306, "minX": 1.63792644E12, "maxY": 1929.4114285714306, "series": [{"data": [[1.63792644E12, 1929.4114285714306]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792644E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 152.0, "minX": 1.63792644E12, "maxY": 11253.0, "series": [{"data": [[1.63792644E12, 11253.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63792644E12, 9231.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63792644E12, 10871.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63792644E12, 9305.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63792644E12, 152.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63792644E12, 4350.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792644E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 436.0, "minX": 45.0, "maxY": 9244.0, "series": [{"data": [[75.0, 5047.0], [87.0, 1669.0], [91.0, 3891.0], [88.0, 4800.5], [45.0, 5431.0], [93.0, 1975.0], [108.0, 9244.0], [59.0, 436.0], [127.0, 9067.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 436.0, "minX": 45.0, "maxY": 9243.5, "series": [{"data": [[75.0, 5047.0], [87.0, 1669.0], [91.0, 3891.0], [88.0, 4800.5], [45.0, 5431.0], [93.0, 1975.0], [108.0, 9243.5], [59.0, 436.0], [127.0, 9066.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.5, "minX": 1.63792644E12, "maxY": 17.5, "series": [{"data": [[1.63792644E12, 17.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792644E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 17.5, "minX": 1.63792644E12, "maxY": 17.5, "series": [{"data": [[1.63792644E12, 17.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792644E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 17.5, "minX": 1.63792644E12, "maxY": 17.5, "series": [{"data": [[1.63792644E12, 17.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792644E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 17.5, "minX": 1.63792644E12, "maxY": 17.5, "series": [{"data": [[1.63792644E12, 17.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792644E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

