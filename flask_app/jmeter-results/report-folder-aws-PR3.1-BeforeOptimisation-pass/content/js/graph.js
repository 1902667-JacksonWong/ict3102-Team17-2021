/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 107.0, "minX": 0.0, "maxY": 7113.0, "series": [{"data": [[0.0, 107.0], [0.1, 107.0], [0.2, 115.0], [0.3, 115.0], [0.4, 136.0], [0.5, 144.0], [0.6, 144.0], [0.7, 148.0], [0.8, 154.0], [0.9, 154.0], [1.0, 157.0], [1.1, 158.0], [1.2, 158.0], [1.3, 196.0], [1.4, 216.0], [1.5, 216.0], [1.6, 219.0], [1.7, 251.0], [1.8, 251.0], [1.9, 255.0], [2.0, 258.0], [2.1, 258.0], [2.2, 272.0], [2.3, 272.0], [2.4, 281.0], [2.5, 283.0], [2.6, 283.0], [2.7, 299.0], [2.8, 309.0], [2.9, 309.0], [3.0, 318.0], [3.1, 322.0], [3.2, 322.0], [3.3, 334.0], [3.4, 360.0], [3.5, 360.0], [3.6, 362.0], [3.7, 364.0], [3.8, 364.0], [3.9, 388.0], [4.0, 392.0], [4.1, 392.0], [4.2, 398.0], [4.3, 398.0], [4.4, 416.0], [4.5, 420.0], [4.6, 420.0], [4.7, 438.0], [4.8, 460.0], [4.9, 460.0], [5.0, 461.0], [5.1, 482.0], [5.2, 482.0], [5.3, 495.0], [5.4, 499.0], [5.5, 499.0], [5.6, 511.0], [5.7, 535.0], [5.8, 535.0], [5.9, 540.0], [6.0, 540.0], [6.1, 540.0], [6.2, 558.0], [6.3, 558.0], [6.4, 565.0], [6.5, 568.0], [6.6, 568.0], [6.7, 568.0], [6.8, 583.0], [6.9, 583.0], [7.0, 590.0], [7.1, 596.0], [7.2, 596.0], [7.3, 597.0], [7.4, 606.0], [7.5, 606.0], [7.6, 606.0], [7.7, 614.0], [7.8, 614.0], [7.9, 615.0], [8.0, 615.0], [8.1, 621.0], [8.2, 622.0], [8.3, 622.0], [8.4, 622.0], [8.5, 625.0], [8.6, 625.0], [8.7, 637.0], [8.8, 641.0], [8.9, 641.0], [9.0, 642.0], [9.1, 648.0], [9.2, 648.0], [9.3, 650.0], [9.4, 657.0], [9.5, 657.0], [9.6, 660.0], [9.7, 662.0], [9.8, 662.0], [9.9, 663.0], [10.0, 667.0], [10.1, 667.0], [10.2, 675.0], [10.3, 675.0], [10.4, 679.0], [10.5, 689.0], [10.6, 689.0], [10.7, 692.0], [10.8, 700.0], [10.9, 700.0], [11.0, 706.0], [11.1, 712.0], [11.2, 712.0], [11.3, 716.0], [11.4, 723.0], [11.5, 723.0], [11.6, 741.0], [11.7, 746.0], [11.8, 746.0], [11.9, 753.0], [12.0, 758.0], [12.1, 758.0], [12.2, 768.0], [12.3, 768.0], [12.4, 773.0], [12.5, 777.0], [12.6, 777.0], [12.7, 778.0], [12.8, 787.0], [12.9, 787.0], [13.0, 798.0], [13.1, 806.0], [13.2, 806.0], [13.3, 815.0], [13.4, 829.0], [13.5, 829.0], [13.6, 833.0], [13.7, 836.0], [13.8, 836.0], [13.9, 840.0], [14.0, 846.0], [14.1, 846.0], [14.2, 851.0], [14.3, 851.0], [14.4, 856.0], [14.5, 862.0], [14.6, 862.0], [14.7, 867.0], [14.8, 891.0], [14.9, 891.0], [15.0, 897.0], [15.1, 918.0], [15.2, 918.0], [15.3, 928.0], [15.4, 928.0], [15.5, 928.0], [15.6, 932.0], [15.7, 935.0], [15.8, 935.0], [15.9, 937.0], [16.0, 957.0], [16.1, 957.0], [16.2, 957.0], [16.3, 957.0], [16.4, 963.0], [16.5, 973.0], [16.6, 973.0], [16.7, 975.0], [16.8, 991.0], [16.9, 991.0], [17.0, 996.0], [17.1, 1010.0], [17.2, 1010.0], [17.3, 1028.0], [17.4, 1037.0], [17.5, 1037.0], [17.6, 1050.0], [17.7, 1055.0], [17.8, 1055.0], [17.9, 1072.0], [18.0, 1073.0], [18.1, 1073.0], [18.2, 1092.0], [18.3, 1092.0], [18.4, 1092.0], [18.5, 1111.0], [18.6, 1111.0], [18.7, 1117.0], [18.8, 1133.0], [18.9, 1133.0], [19.0, 1139.0], [19.1, 1153.0], [19.2, 1153.0], [19.3, 1158.0], [19.4, 1172.0], [19.5, 1172.0], [19.6, 1176.0], [19.7, 1192.0], [19.8, 1192.0], [19.9, 1213.0], [20.0, 1217.0], [20.1, 1217.0], [20.2, 1230.0], [20.3, 1230.0], [20.4, 1235.0], [20.5, 1250.0], [20.6, 1250.0], [20.7, 1251.0], [20.8, 1264.0], [20.9, 1264.0], [21.0, 1282.0], [21.1, 1307.0], [21.2, 1307.0], [21.3, 1307.0], [21.4, 1337.0], [21.5, 1337.0], [21.6, 1351.0], [21.7, 1356.0], [21.8, 1356.0], [21.9, 1365.0], [22.0, 1386.0], [22.1, 1386.0], [22.2, 1403.0], [22.3, 1403.0], [22.4, 1424.0], [22.5, 1425.0], [22.6, 1425.0], [22.7, 1451.0], [22.8, 1480.0], [22.9, 1480.0], [23.0, 1480.0], [23.1, 1498.0], [23.2, 1498.0], [23.3, 1519.0], [23.4, 1536.0], [23.5, 1536.0], [23.6, 1555.0], [23.7, 1564.0], [23.8, 1564.0], [23.9, 1581.0], [24.0, 1599.0], [24.1, 1599.0], [24.2, 1617.0], [24.3, 1617.0], [24.4, 1639.0], [24.5, 1664.0], [24.6, 1664.0], [24.7, 1664.0], [24.8, 1684.0], [24.9, 1684.0], [25.0, 1706.0], [25.1, 1727.0], [25.2, 1727.0], [25.3, 1745.0], [25.4, 1763.0], [25.5, 1763.0], [25.6, 1773.0], [25.7, 1791.0], [25.8, 1791.0], [25.9, 1808.0], [26.0, 1836.0], [26.1, 1836.0], [26.2, 1840.0], [26.3, 1840.0], [26.4, 1852.0], [26.5, 1875.0], [26.6, 1875.0], [26.7, 1898.0], [26.8, 1912.0], [26.9, 1912.0], [27.0, 1936.0], [27.1, 1949.0], [27.2, 1949.0], [27.3, 1968.0], [27.4, 1992.0], [27.5, 1992.0], [27.6, 1996.0], [27.7, 2017.0], [27.8, 2017.0], [27.9, 2046.0], [28.0, 2059.0], [28.1, 2059.0], [28.2, 2080.0], [28.3, 2080.0], [28.4, 2101.0], [28.5, 2119.0], [28.6, 2119.0], [28.7, 2141.0], [28.8, 2166.0], [28.9, 2166.0], [29.0, 2191.0], [29.1, 2203.0], [29.2, 2203.0], [29.3, 2236.0], [29.4, 2245.0], [29.5, 2245.0], [29.6, 2273.0], [29.7, 2311.0], [29.8, 2311.0], [29.9, 2329.0], [30.0, 2345.0], [30.1, 2345.0], [30.2, 2374.0], [30.3, 2374.0], [30.4, 2390.0], [30.5, 2408.0], [30.6, 2408.0], [30.7, 2424.0], [30.8, 2449.0], [30.9, 2449.0], [31.0, 2473.0], [31.1, 2487.0], [31.2, 2487.0], [31.3, 2512.0], [31.4, 2535.0], [31.5, 2535.0], [31.6, 2546.0], [31.7, 2552.0], [31.8, 2552.0], [31.9, 2575.0], [32.0, 2598.0], [32.1, 2598.0], [32.2, 2617.0], [32.3, 2617.0], [32.4, 2638.0], [32.5, 2663.0], [32.6, 2663.0], [32.7, 2683.0], [32.8, 2710.0], [32.9, 2710.0], [33.0, 2742.0], [33.1, 2743.0], [33.2, 2743.0], [33.3, 2766.0], [33.4, 2788.0], [33.5, 2788.0], [33.6, 2808.0], [33.7, 2825.0], [33.8, 2825.0], [33.9, 2851.0], [34.0, 2857.0], [34.1, 2857.0], [34.2, 2872.0], [34.3, 2872.0], [34.4, 2895.0], [34.5, 2918.0], [34.6, 2918.0], [34.7, 2944.0], [34.8, 2957.0], [34.9, 2957.0], [35.0, 2981.0], [35.1, 2983.0], [35.2, 2983.0], [35.3, 2998.0], [35.4, 3014.0], [35.5, 3014.0], [35.6, 3039.0], [35.7, 3068.0], [35.8, 3068.0], [35.9, 3093.0], [36.0, 3118.0], [36.1, 3118.0], [36.2, 3133.0], [36.3, 3133.0], [36.4, 3155.0], [36.5, 3172.0], [36.6, 3172.0], [36.7, 3190.0], [36.8, 3208.0], [36.9, 3208.0], [37.0, 3231.0], [37.1, 3253.0], [37.2, 3253.0], [37.3, 3265.0], [37.4, 3295.0], [37.5, 3295.0], [37.6, 3313.0], [37.7, 3329.0], [37.8, 3329.0], [37.9, 3362.0], [38.0, 3362.0], [38.1, 3362.0], [38.2, 3377.0], [38.3, 3377.0], [38.4, 3395.0], [38.5, 3420.0], [38.6, 3420.0], [38.7, 3430.0], [38.8, 3467.0], [38.9, 3467.0], [39.0, 3483.0], [39.1, 3504.0], [39.2, 3504.0], [39.3, 3525.0], [39.4, 3547.0], [39.5, 3547.0], [39.6, 3567.0], [39.7, 3587.0], [39.8, 3587.0], [39.9, 3603.0], [40.0, 3622.0], [40.1, 3622.0], [40.2, 3637.0], [40.3, 3637.0], [40.4, 3655.0], [40.5, 3679.0], [40.6, 3679.0], [40.7, 3695.0], [40.8, 3713.0], [40.9, 3713.0], [41.0, 3736.0], [41.1, 3755.0], [41.2, 3755.0], [41.3, 3773.0], [41.4, 3797.0], [41.5, 3797.0], [41.6, 3816.0], [41.7, 3836.0], [41.8, 3836.0], [41.9, 3864.0], [42.0, 3886.0], [42.1, 3886.0], [42.2, 3888.0], [42.3, 3888.0], [42.4, 3907.0], [42.5, 3928.0], [42.6, 3928.0], [42.7, 3946.0], [42.8, 3970.0], [42.9, 3970.0], [43.0, 3992.0], [43.1, 3994.0], [43.2, 3994.0], [43.3, 4009.0], [43.4, 4027.0], [43.5, 4027.0], [43.6, 4053.0], [43.7, 4053.0], [43.8, 4053.0], [43.9, 4070.0], [44.0, 4091.0], [44.1, 4091.0], [44.2, 4111.0], [44.3, 4111.0], [44.4, 4127.0], [44.5, 4142.0], [44.6, 4142.0], [44.7, 4163.0], [44.8, 4180.0], [44.9, 4180.0], [45.0, 4193.0], [45.1, 4219.0], [45.2, 4219.0], [45.3, 4230.0], [45.4, 4247.0], [45.5, 4247.0], [45.6, 4276.0], [45.7, 4285.0], [45.8, 4285.0], [45.9, 4305.0], [46.0, 4326.0], [46.1, 4326.0], [46.2, 4328.0], [46.3, 4328.0], [46.4, 4349.0], [46.5, 4354.0], [46.6, 4354.0], [46.7, 4375.0], [46.8, 4397.0], [46.9, 4397.0], [47.0, 4402.0], [47.1, 4420.0], [47.2, 4420.0], [47.3, 4442.0], [47.4, 4444.0], [47.5, 4444.0], [47.6, 4461.0], [47.7, 4482.0], [47.8, 4482.0], [47.9, 4503.0], [48.0, 4510.0], [48.1, 4510.0], [48.2, 4525.0], [48.3, 4525.0], [48.4, 4546.0], [48.5, 4565.0], [48.6, 4565.0], [48.7, 4585.0], [48.8, 4598.0], [48.9, 4598.0], [49.0, 4620.0], [49.1, 4638.0], [49.2, 4638.0], [49.3, 4660.0], [49.4, 4665.0], [49.5, 4665.0], [49.6, 4691.0], [49.7, 4697.0], [49.8, 4697.0], [49.9, 4702.0], [50.0, 4718.0], [50.1, 4718.0], [50.2, 4718.0], [50.3, 4718.0], [50.4, 4738.0], [50.5, 4767.0], [50.6, 4767.0], [50.7, 4772.0], [50.8, 4788.0], [50.9, 4788.0], [51.0, 4817.0], [51.1, 4818.0], [51.2, 4818.0], [51.3, 4822.0], [51.4, 4834.0], [51.5, 4834.0], [51.6, 4856.0], [51.7, 4875.0], [51.8, 4875.0], [51.9, 4877.0], [52.0, 4898.0], [52.1, 4898.0], [52.2, 4912.0], [52.3, 4912.0], [52.4, 4935.0], [52.5, 4952.0], [52.6, 4952.0], [52.7, 4967.0], [52.8, 4986.0], [52.9, 4986.0], [53.0, 4991.0], [53.1, 5010.0], [53.2, 5010.0], [53.3, 5015.0], [53.4, 5027.0], [53.5, 5027.0], [53.6, 5051.0], [53.7, 5096.0], [53.8, 5096.0], [53.9, 5109.0], [54.0, 5138.0], [54.1, 5138.0], [54.2, 5146.0], [54.3, 5146.0], [54.4, 5158.0], [54.5, 5166.0], [54.6, 5166.0], [54.7, 5190.0], [54.8, 5210.0], [54.9, 5210.0], [55.0, 5212.0], [55.1, 5230.0], [55.2, 5230.0], [55.3, 5250.0], [55.4, 5254.0], [55.5, 5254.0], [55.6, 5261.0], [55.7, 5269.0], [55.8, 5269.0], [55.9, 5285.0], [56.0, 5285.0], [56.1, 5285.0], [56.2, 5297.0], [56.3, 5297.0], [56.4, 5307.0], [56.5, 5326.0], [56.6, 5326.0], [56.7, 5340.0], [56.8, 5347.0], [56.9, 5347.0], [57.0, 5366.0], [57.1, 5371.0], [57.2, 5371.0], [57.3, 5394.0], [57.4, 5403.0], [57.5, 5403.0], [57.6, 5422.0], [57.7, 5428.0], [57.8, 5428.0], [57.9, 5441.0], [58.0, 5455.0], [58.1, 5455.0], [58.2, 5460.0], [58.3, 5460.0], [58.4, 5477.0], [58.5, 5496.0], [58.6, 5496.0], [58.7, 5516.0], [58.8, 5524.0], [58.9, 5524.0], [59.0, 5536.0], [59.1, 5537.0], [59.2, 5537.0], [59.3, 5551.0], [59.4, 5574.0], [59.5, 5574.0], [59.6, 5575.0], [59.7, 5595.0], [59.8, 5595.0], [59.9, 5608.0], [60.0, 5623.0], [60.1, 5623.0], [60.2, 5623.0], [60.3, 5623.0], [60.4, 5645.0], [60.5, 5649.0], [60.6, 5649.0], [60.7, 5657.0], [60.8, 5679.0], [60.9, 5679.0], [61.0, 5681.0], [61.1, 5686.0], [61.2, 5686.0], [61.3, 5687.0], [61.4, 5696.0], [61.5, 5696.0], [61.6, 5708.0], [61.7, 5712.0], [61.8, 5712.0], [61.9, 5724.0], [62.0, 5732.0], [62.1, 5732.0], [62.2, 5745.0], [62.3, 5745.0], [62.4, 5756.0], [62.5, 5764.0], [62.6, 5764.0], [62.7, 5767.0], [62.8, 5782.0], [62.9, 5782.0], [63.0, 5783.0], [63.1, 5798.0], [63.2, 5798.0], [63.3, 5816.0], [63.4, 5821.0], [63.5, 5821.0], [63.6, 5835.0], [63.7, 5837.0], [63.8, 5837.0], [63.9, 5841.0], [64.0, 5851.0], [64.1, 5851.0], [64.2, 5852.0], [64.3, 5852.0], [64.4, 5874.0], [64.5, 5878.0], [64.6, 5878.0], [64.7, 5883.0], [64.8, 5896.0], [64.9, 5896.0], [65.0, 5899.0], [65.1, 5913.0], [65.2, 5913.0], [65.3, 5917.0], [65.4, 5931.0], [65.5, 5931.0], [65.6, 5934.0], [65.7, 5949.0], [65.8, 5949.0], [65.9, 5954.0], [66.0, 5970.0], [66.1, 5970.0], [66.2, 5972.0], [66.3, 5972.0], [66.4, 5980.0], [66.5, 5985.0], [66.6, 5985.0], [66.7, 6003.0], [66.8, 6011.0], [66.9, 6011.0], [67.0, 6017.0], [67.1, 6021.0], [67.2, 6021.0], [67.3, 6043.0], [67.4, 6063.0], [67.5, 6063.0], [67.6, 6075.0], [67.7, 6080.0], [67.8, 6080.0], [67.9, 6087.0], [68.0, 6093.0], [68.1, 6093.0], [68.2, 6106.0], [68.3, 6106.0], [68.4, 6112.0], [68.5, 6124.0], [68.6, 6124.0], [68.7, 6127.0], [68.8, 6133.0], [68.9, 6133.0], [69.0, 6139.0], [69.1, 6145.0], [69.2, 6145.0], [69.3, 6153.0], [69.4, 6160.0], [69.5, 6160.0], [69.6, 6165.0], [69.7, 6169.0], [69.8, 6169.0], [69.9, 6172.0], [70.0, 6172.0], [70.1, 6180.0], [70.2, 6185.0], [70.3, 6185.0], [70.4, 6189.0], [70.5, 6199.0], [70.6, 6199.0], [70.7, 6201.0], [70.8, 6214.0], [70.9, 6214.0], [71.0, 6217.0], [71.1, 6227.0], [71.2, 6227.0], [71.3, 6230.0], [71.4, 6236.0], [71.5, 6236.0], [71.6, 6246.0], [71.7, 6249.0], [71.8, 6249.0], [71.9, 6257.0], [72.0, 6257.0], [72.1, 6264.0], [72.2, 6269.0], [72.3, 6269.0], [72.4, 6276.0], [72.5, 6280.0], [72.6, 6280.0], [72.7, 6290.0], [72.8, 6296.0], [72.9, 6296.0], [73.0, 6301.0], [73.1, 6303.0], [73.2, 6303.0], [73.3, 6308.0], [73.4, 6318.0], [73.5, 6318.0], [73.6, 6321.0], [73.7, 6331.0], [73.8, 6331.0], [73.9, 6334.0], [74.0, 6334.0], [74.1, 6340.0], [74.2, 6349.0], [74.3, 6349.0], [74.4, 6353.0], [74.5, 6366.0], [74.6, 6366.0], [74.7, 6367.0], [74.8, 6378.0], [74.9, 6378.0], [75.0, 6381.0], [75.1, 6394.0], [75.2, 6394.0], [75.3, 6403.0], [75.4, 6413.0], [75.5, 6413.0], [75.6, 6415.0], [75.7, 6423.0], [75.8, 6423.0], [75.9, 6427.0], [76.0, 6427.0], [76.1, 6434.0], [76.2, 6438.0], [76.3, 6438.0], [76.4, 6450.0], [76.5, 6452.0], [76.6, 6452.0], [76.7, 6457.0], [76.8, 6464.0], [76.9, 6464.0], [77.0, 6469.0], [77.1, 6470.0], [77.2, 6470.0], [77.3, 6471.0], [77.4, 6474.0], [77.5, 6474.0], [77.6, 6483.0], [77.7, 6492.0], [77.8, 6492.0], [77.9, 6494.0], [78.0, 6494.0], [78.1, 6497.0], [78.2, 6512.0], [78.3, 6512.0], [78.4, 6516.0], [78.5, 6533.0], [78.6, 6533.0], [78.7, 6536.0], [78.8, 6545.0], [78.9, 6545.0], [79.0, 6549.0], [79.1, 6549.0], [79.2, 6549.0], [79.3, 6549.0], [79.4, 6554.0], [79.5, 6554.0], [79.6, 6579.0], [79.7, 6580.0], [79.8, 6580.0], [79.9, 6584.0], [80.0, 6584.0], [80.1, 6585.0], [80.2, 6590.0], [80.3, 6590.0], [80.4, 6597.0], [80.5, 6597.0], [80.6, 6597.0], [80.7, 6602.0], [80.8, 6611.0], [80.9, 6611.0], [81.0, 6615.0], [81.1, 6629.0], [81.2, 6629.0], [81.3, 6630.0], [81.4, 6638.0], [81.5, 6638.0], [81.6, 6644.0], [81.7, 6650.0], [81.8, 6650.0], [81.9, 6666.0], [82.0, 6666.0], [82.1, 6675.0], [82.2, 6679.0], [82.3, 6679.0], [82.4, 6688.0], [82.5, 6691.0], [82.6, 6691.0], [82.7, 6701.0], [82.8, 6702.0], [82.9, 6702.0], [83.0, 6707.0], [83.1, 6713.0], [83.2, 6713.0], [83.3, 6718.0], [83.4, 6729.0], [83.5, 6729.0], [83.6, 6731.0], [83.7, 6737.0], [83.8, 6737.0], [83.9, 6738.0], [84.0, 6738.0], [84.1, 6742.0], [84.2, 6745.0], [84.3, 6745.0], [84.4, 6745.0], [84.5, 6749.0], [84.6, 6749.0], [84.7, 6756.0], [84.8, 6756.0], [84.9, 6756.0], [85.0, 6758.0], [85.1, 6759.0], [85.2, 6759.0], [85.3, 6759.0], [85.4, 6765.0], [85.5, 6765.0], [85.6, 6776.0], [85.7, 6778.0], [85.8, 6778.0], [85.9, 6781.0], [86.0, 6781.0], [86.1, 6790.0], [86.2, 6797.0], [86.3, 6797.0], [86.4, 6798.0], [86.5, 6802.0], [86.6, 6802.0], [86.7, 6814.0], [86.8, 6817.0], [86.9, 6817.0], [87.0, 6819.0], [87.1, 6820.0], [87.2, 6820.0], [87.3, 6821.0], [87.4, 6822.0], [87.5, 6822.0], [87.6, 6822.0], [87.7, 6825.0], [87.8, 6825.0], [87.9, 6827.0], [88.0, 6827.0], [88.1, 6833.0], [88.2, 6839.0], [88.3, 6839.0], [88.4, 6840.0], [88.5, 6853.0], [88.6, 6853.0], [88.7, 6854.0], [88.8, 6859.0], [88.9, 6859.0], [89.0, 6863.0], [89.1, 6866.0], [89.2, 6866.0], [89.3, 6872.0], [89.4, 6881.0], [89.5, 6881.0], [89.6, 6883.0], [89.7, 6896.0], [89.8, 6896.0], [89.9, 6897.0], [90.0, 6897.0], [90.1, 6904.0], [90.2, 6912.0], [90.3, 6912.0], [90.4, 6913.0], [90.5, 6920.0], [90.6, 6920.0], [90.7, 6921.0], [90.8, 6928.0], [90.9, 6928.0], [91.0, 6935.0], [91.1, 6935.0], [91.2, 6935.0], [91.3, 6941.0], [91.4, 6943.0], [91.5, 6943.0], [91.6, 6947.0], [91.7, 6952.0], [91.8, 6952.0], [91.9, 6962.0], [92.0, 6962.0], [92.1, 6967.0], [92.2, 6971.0], [92.3, 6971.0], [92.4, 6971.0], [92.5, 6972.0], [92.6, 6972.0], [92.7, 6974.0], [92.8, 6975.0], [92.9, 6975.0], [93.0, 6979.0], [93.1, 6983.0], [93.2, 6983.0], [93.3, 6984.0], [93.4, 6990.0], [93.5, 6990.0], [93.6, 6996.0], [93.7, 6997.0], [93.8, 6997.0], [93.9, 6998.0], [94.0, 6998.0], [94.1, 7000.0], [94.2, 7001.0], [94.3, 7001.0], [94.4, 7005.0], [94.5, 7007.0], [94.6, 7007.0], [94.7, 7008.0], [94.8, 7010.0], [94.9, 7010.0], [95.0, 7020.0], [95.1, 7025.0], [95.2, 7025.0], [95.3, 7025.0], [95.4, 7025.0], [95.5, 7025.0], [95.6, 7026.0], [95.7, 7037.0], [95.8, 7037.0], [95.9, 7040.0], [96.0, 7040.0], [96.1, 7044.0], [96.2, 7048.0], [96.3, 7048.0], [96.4, 7050.0], [96.5, 7056.0], [96.6, 7056.0], [96.7, 7066.0], [96.8, 7067.0], [96.9, 7067.0], [97.0, 7068.0], [97.1, 7071.0], [97.2, 7071.0], [97.3, 7072.0], [97.4, 7073.0], [97.5, 7073.0], [97.6, 7074.0], [97.7, 7078.0], [97.8, 7078.0], [97.9, 7085.0], [98.0, 7085.0], [98.1, 7087.0], [98.2, 7088.0], [98.3, 7088.0], [98.4, 7089.0], [98.5, 7092.0], [98.6, 7092.0], [98.7, 7092.0], [98.8, 7098.0], [98.9, 7098.0], [99.0, 7098.0], [99.1, 7099.0], [99.2, 7099.0], [99.3, 7106.0], [99.4, 7107.0], [99.5, 7107.0], [99.6, 7107.0], [99.7, 7111.0], [99.8, 7111.0], [99.9, 7113.0], [100.0, 7113.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 100.0, "maxY": 34.0, "series": [{"data": [[600.0, 22.0], [700.0, 15.0], [800.0, 13.0], [900.0, 13.0], [1000.0, 9.0], [1100.0, 9.0], [1200.0, 8.0], [1300.0, 7.0], [1400.0, 7.0], [1500.0, 6.0], [1600.0, 5.0], [1700.0, 6.0], [1800.0, 6.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 5.0], [2200.0, 4.0], [2300.0, 5.0], [2400.0, 5.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 6.0], [3000.0, 4.0], [3100.0, 5.0], [3200.0, 5.0], [3300.0, 6.0], [3400.0, 4.0], [3500.0, 5.0], [3600.0, 6.0], [3700.0, 5.0], [3800.0, 5.0], [3900.0, 6.0], [4000.0, 6.0], [4100.0, 6.0], [4200.0, 5.0], [4300.0, 7.0], [4400.0, 6.0], [4500.0, 7.0], [4600.0, 6.0], [4700.0, 7.0], [4800.0, 8.0], [4900.0, 6.0], [5000.0, 5.0], [5100.0, 6.0], [5200.0, 10.0], [5300.0, 7.0], [5400.0, 8.0], [5500.0, 8.0], [5600.0, 11.0], [5700.0, 11.0], [5800.0, 12.0], [5900.0, 10.0], [6000.0, 10.0], [6100.0, 16.0], [6200.0, 15.0], [6300.0, 15.0], [6400.0, 19.0], [6500.0, 16.0], [6600.0, 13.0], [6700.0, 25.0], [6800.0, 23.0], [6900.0, 26.0], [7000.0, 34.0], [7100.0, 5.0], [100.0, 9.0], [200.0, 9.0], [300.0, 10.0], [400.0, 8.0], [500.0, 12.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 499.0, "series": [{"data": [[0.0, 36.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 115.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 499.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 222.27538461538452, "minX": 1.63792848E12, "maxY": 222.27538461538452, "series": [{"data": [[1.63792848E12, 222.27538461538452]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792848E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 150.5, "minX": 1.0, "maxY": 7113.0, "series": [{"data": [[2.0, 7113.0], [3.0, 7107.0], [5.0, 7103.0], [6.0, 7106.0], [8.0, 7093.0], [9.0, 7092.0], [10.0, 7098.0], [12.0, 7089.5], [13.0, 7085.0], [14.0, 7089.0], [16.0, 7075.0], [18.0, 7068.5], [19.0, 7074.0], [21.0, 7070.5], [22.0, 7067.0], [23.0, 7050.0], [24.0, 7056.0], [25.0, 7048.0], [27.0, 7042.0], [28.0, 7026.0], [29.0, 7037.0], [30.0, 7025.0], [31.0, 7008.0], [33.0, 7022.5], [34.0, 7025.0], [36.0, 7007.5], [39.0, 7007.0], [38.0, 6999.5], [41.0, 7000.0], [40.0, 6996.0], [42.0, 6990.0], [45.0, 6984.0], [44.0, 6990.0], [48.0, 6976.0], [51.0, 6969.5], [50.0, 6971.0], [52.0, 6971.0], [54.0, 6957.0], [57.0, 6935.0], [56.0, 6945.0], [59.0, 6938.0], [61.0, 6928.0], [60.0, 6921.0], [65.0, 1813.5], [66.0, 2401.0], [67.0, 6904.0], [64.0, 6915.0], [70.0, 150.5], [69.0, 3517.5], [71.0, 6869.0], [68.0, 6883.0], [73.0, 2432.6666666666665], [72.0, 3527.5], [75.0, 6839.0], [74.0, 6853.0], [78.0, 253.0], [77.0, 3549.0], [79.0, 281.0], [76.0, 6854.0], [81.0, 3546.0], [80.0, 5191.0], [83.0, 3560.5], [82.0, 3564.0], [86.0, 322.0], [85.0, 3571.5], [84.0, 3575.5], [87.0, 364.0], [88.0, 4232.0], [91.0, 3596.25], [89.0, 6790.0], [94.0, 2537.3333333333335], [95.0, 6756.0], [93.0, 6781.0], [92.0, 6778.0], [96.0, 2528.3333333333335], [99.0, 6765.0], [98.0, 6758.0], [97.0, 6756.0], [100.0, 2560.0], [102.0, 2575.3333333333335], [103.0, 6742.0], [101.0, 6745.0], [105.0, 3623.0], [109.0, 540.0], [108.0, 5183.25], [111.0, 2098.0], [110.0, 6715.5], [113.0, 3647.25], [115.0, 3656.5], [114.0, 6688.0], [117.0, 3634.25], [119.0, 2612.0], [118.0, 6666.0], [120.0, 3650.5], [123.0, 2616.333333333333], [122.0, 3618.0], [121.0, 6638.0], [125.0, 2620.666666666667], [124.0, 3616.0], [127.0, 640.0], [126.0, 6597.0], [131.0, 3617.0], [130.0, 2632.666666666667], [134.0, 2626.333333333333], [132.0, 3623.5], [135.0, 2634.333333333333], [133.0, 6579.0], [129.0, 6580.0], [128.0, 6599.5], [137.0, 4598.333333333333], [136.0, 689.0], [140.0, 2647.333333333333], [143.0, 3603.0], [142.0, 6512.0], [141.0, 6516.0], [139.0, 6533.0], [138.0, 6545.0], [145.0, 3593.0], [144.0, 3607.5], [150.0, 2650.333333333333], [151.0, 3612.0], [149.0, 6469.0], [148.0, 6474.0], [147.0, 6483.0], [146.0, 6497.0], [152.0, 3604.0], [156.0, 2189.0], [157.0, 782.5], [159.0, 6413.0], [158.0, 6425.0], [155.0, 6434.0], [154.0, 6454.5], [161.0, 798.0], [160.0, 2678.666666666667], [167.0, 2211.75], [166.0, 6367.0], [165.0, 6366.0], [164.0, 6381.0], [163.0, 6378.0], [162.0, 6398.5], [168.0, 3596.5], [172.0, 2675.0], [170.0, 3590.0], [174.0, 867.0], [173.0, 3591.5], [175.0, 6305.5], [171.0, 6331.0], [169.0, 6340.0], [181.0, 3577.5], [180.0, 4484.333333333333], [183.0, 6257.0], [182.0, 6269.0], [178.0, 6295.666666666667], [184.0, 2697.333333333333], [188.0, 3583.75], [187.0, 928.0], [190.0, 4455.333333333333], [191.0, 3579.0], [186.0, 6227.0], [185.0, 6249.0], [194.0, 2270.5], [196.0, 4441.333333333333], [199.0, 991.0], [197.0, 6172.0], [193.0, 6185.0], [192.0, 6199.0], [200.0, 4868.5], [203.0, 3571.5], [207.0, 3570.75], [205.0, 6127.0], [204.0, 6124.0], [202.0, 6139.0], [201.0, 6145.0], [212.0, 3559.0], [211.0, 4401.666666666667], [215.0, 2722.0], [214.0, 6017.0], [213.0, 6043.0], [209.0, 6090.0], [219.0, 2723.0], [223.0, 3533.0], [222.0, 5954.0], [221.0, 5972.0], [220.0, 5970.0], [218.0, 5980.0], [217.0, 6011.0], [216.0, 6003.0], [224.0, 3522.5], [228.0, 2722.666666666667], [230.0, 5883.0], [229.0, 5899.0], [227.0, 5917.0], [226.0, 5913.0], [225.0, 5931.0], [232.0, 3515.75], [236.0, 3508.5], [235.0, 3504.5], [238.0, 1192.0], [239.0, 5818.5], [237.0, 5835.0], [234.0, 5852.0], [233.0, 5851.0], [244.0, 2732.333333333333], [246.0, 2736.666666666667], [247.0, 5732.0], [245.0, 5756.0], [243.0, 5764.0], [242.0, 5782.0], [241.0, 5783.0], [240.0, 5798.0], [250.0, 2741.666666666667], [253.0, 1264.0], [255.0, 5682.0], [252.0, 5687.0], [251.0, 5696.0], [249.0, 5710.0], [271.0, 2728.0], [256.0, 3469.5], [261.0, 2740.666666666667], [260.0, 5623.0], [263.0, 5575.0], [262.0, 5595.0], [267.0, 3437.0], [270.0, 5496.0], [269.0, 5524.0], [268.0, 5516.0], [259.0, 5623.0], [258.0, 5647.0], [266.0, 5536.0], [265.0, 5551.0], [264.0, 5574.0], [287.0, 5285.0], [273.0, 3410.0], [277.0, 3394.5], [276.0, 5428.0], [278.0, 5394.0], [272.0, 5460.0], [280.0, 4046.6666666666665], [281.0, 5340.0], [286.0, 2711.333333333333], [285.0, 5307.0], [284.0, 5297.0], [275.0, 5422.0], [274.0, 5441.0], [283.0, 5326.0], [282.0, 5347.0], [303.0, 5027.0], [290.0, 1451.0], [295.0, 5190.0], [289.0, 5269.0], [288.0, 5261.0], [294.0, 5210.0], [293.0, 5212.0], [292.0, 5230.0], [296.0, 2708.666666666667], [301.0, 3297.0], [302.0, 5051.0], [300.0, 5109.0], [291.0, 5252.0], [299.0, 5146.0], [298.0, 5138.0], [297.0, 5158.0], [319.0, 4820.0], [305.0, 3267.0], [308.0, 3251.5], [309.0, 4952.0], [311.0, 4912.0], [304.0, 5010.0], [310.0, 4935.0], [314.0, 2665.333333333333], [318.0, 1581.0], [317.0, 4817.0], [316.0, 4834.0], [307.0, 4986.0], [306.0, 4991.0], [315.0, 4856.0], [313.0, 4875.0], [312.0, 4898.0], [335.0, 4565.0], [321.0, 3185.5], [325.0, 3167.5], [324.0, 4718.0], [327.0, 4699.5], [320.0, 4788.0], [329.0, 3152.0], [328.0, 4691.0], [334.0, 2637.6666666666665], [333.0, 4598.0], [332.0, 4620.0], [323.0, 4738.0], [322.0, 4767.0], [331.0, 4638.0], [330.0, 4660.0], [338.0, 1684.0], [342.0, 3075.0], [341.0, 4461.0], [340.0, 4482.0], [343.0, 4442.0], [337.0, 4525.0], [336.0, 4546.0], [344.0, 3073.5], [350.0, 3035.5], [351.0, 4328.0], [349.0, 4354.0], [348.0, 4349.0], [339.0, 4506.5], [347.0, 4375.0], [346.0, 4399.5], [365.0, 4070.0], [356.0, 3001.5], [358.0, 4193.0], [357.0, 4219.0], [355.0, 3005.0], [354.0, 4276.0], [353.0, 4285.0], [352.0, 4305.0], [359.0, 2985.5], [363.0, 2959.5], [367.0, 4053.0], [366.0, 4053.0], [364.0, 4091.0], [362.0, 4127.0], [361.0, 4142.0], [360.0, 4163.0], [382.0, 3773.0], [369.0, 2924.5], [368.0, 2931.5], [375.0, 3907.0], [374.0, 3928.0], [373.0, 3946.0], [372.0, 3970.0], [371.0, 2923.0], [370.0, 3992.0], [376.0, 2881.5], [379.0, 2548.6666666666665], [378.0, 3864.0], [377.0, 3886.0], [383.0, 3755.0], [381.0, 3797.0], [380.0, 3816.0], [398.0, 3467.0], [384.0, 2836.0], [387.0, 2814.0], [386.0, 3695.0], [385.0, 3713.0], [390.0, 2795.0], [389.0, 3637.0], [388.0, 3655.0], [391.0, 3603.0], [395.0, 2760.5], [394.0, 2769.5], [399.0, 3430.0], [393.0, 3567.0], [392.0, 3587.0], [397.0, 3483.0], [396.0, 3504.0], [414.0, 3155.0], [408.0, 2655.5], [401.0, 2706.0], [400.0, 3420.0], [403.0, 3362.0], [402.0, 3377.0], [407.0, 3295.0], [406.0, 3313.0], [405.0, 3329.0], [404.0, 3362.0], [411.0, 2633.5], [415.0, 2606.5], [413.0, 3172.0], [412.0, 3190.0], [410.0, 3231.0], [409.0, 3253.0], [431.0, 2825.0], [421.0, 2549.5], [420.0, 3014.0], [424.0, 2538.0], [428.0, 2506.5], [430.0, 2854.0], [427.0, 2895.0], [426.0, 2918.0], [425.0, 2944.0], [423.0, 2983.0], [417.0, 3093.0], [416.0, 3118.0], [419.0, 3039.0], [418.0, 3068.0], [422.0, 2981.0], [447.0, 2512.0], [433.0, 2477.0], [437.0, 2450.5], [436.0, 2742.0], [439.0, 2663.0], [432.0, 2808.0], [438.0, 2683.0], [442.0, 2400.5], [446.0, 2385.5], [445.0, 2546.0], [444.0, 2552.0], [435.0, 2743.0], [434.0, 2766.0], [443.0, 2575.0], [441.0, 2617.0], [440.0, 2638.0], [450.0, 2347.0], [456.0, 2301.0], [457.0, 2311.0], [455.0, 2345.0], [454.0, 2374.0], [453.0, 2390.0], [452.0, 2408.0], [451.0, 2424.0], [449.0, 2473.0], [448.0, 2487.0], [1.0, 7111.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[222.27384615384608, 4147.0523076923055]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 457.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1928.3333333333333, "minX": 1.63792848E12, "maxY": 9717.5, "series": [{"data": [[1.63792848E12, 1928.3333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63792848E12, 9717.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792848E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4147.0523076923055, "minX": 1.63792848E12, "maxY": 4147.0523076923055, "series": [{"data": [[1.63792848E12, 4147.0523076923055]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792848E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4146.89846153846, "minX": 1.63792848E12, "maxY": 4146.89846153846, "series": [{"data": [[1.63792848E12, 4146.89846153846]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792848E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.592307692307688, "minX": 1.63792848E12, "maxY": 13.592307692307688, "series": [{"data": [[1.63792848E12, 13.592307692307688]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792848E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 107.0, "minX": 1.63792848E12, "maxY": 7113.0, "series": [{"data": [[1.63792848E12, 7113.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63792848E12, 6903.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63792848E12, 7098.49]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63792848E12, 7022.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63792848E12, 107.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63792848E12, 4710.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 272.0, "minX": 29.0, "maxY": 6983.0, "series": [{"data": [[76.0, 5982.5], [41.0, 2166.0], [40.0, 2982.0], [85.0, 706.0], [43.0, 3797.0], [91.0, 6549.0], [89.0, 6983.0], [49.0, 4565.0], [53.0, 1351.0], [54.0, 5316.5], [29.0, 272.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 271.0, "minX": 29.0, "maxY": 6983.0, "series": [{"data": [[76.0, 5982.5], [41.0, 2166.0], [40.0, 2982.0], [85.0, 705.0], [43.0, 3797.0], [91.0, 6549.0], [89.0, 6983.0], [49.0, 4564.0], [53.0, 1351.0], [54.0, 5316.5], [29.0, 271.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.833333333333334, "minX": 1.63792848E12, "maxY": 10.833333333333334, "series": [{"data": [[1.63792848E12, 10.833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.833333333333334, "minX": 1.63792848E12, "maxY": 10.833333333333334, "series": [{"data": [[1.63792848E12, 10.833333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63792848E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.833333333333334, "minX": 1.63792848E12, "maxY": 10.833333333333334, "series": [{"data": [[1.63792848E12, 10.833333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792848E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.833333333333334, "minX": 1.63792848E12, "maxY": 10.833333333333334, "series": [{"data": [[1.63792848E12, 10.833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63792848E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

